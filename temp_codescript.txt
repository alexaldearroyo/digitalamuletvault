// src/app/page.js:

import Link from 'next/link';
// import Head from 'next/head';
import Header from '../components/Header';
import ShaderImage1 from '../components/ShaderImage1';
import ShaderImage2 from '../components/ShaderImage2';
import ShaderImage3 from '../components/ShaderImage3';
import ShaderImage4 from '../components/ShaderImage4';
import { getProducts } from '../databases/products';

// change name of function later
// const mockProducts = [
//   { id: 2, name: 'Deep Amulet' },
//   { id: 4, name: 'Spherical Amulet' },
//   { id: 3, name: 'Fractal Amulet' },
//   { id: 1, name: 'Smooth Amulet' },
// ];

export default async function ProductsPage() {
  const products = await getProducts();

  return (
    <div>
      {/* <Head>
        <title>Products Page</title>
        <meta
          name="description"
          content="Page showing information of selected product."
        />
      </Head> */}
      <div className="container mx-auto p-6">
        <Header />
        <div className="product-list">
          {products.map((product) => (
            <Link
              href={`/products/${product.id}`}
              key={product.id}
              data-test-id={`product-${product.id}`}
            >
              <div className="product-card">
                {product.shaderPath && (
                  <div className="rounded-lg overflow-hidden">
                    {product.shaderPath === 'ShaderImage1' && (
                      <ShaderImage1 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage2' && (
                      <ShaderImage2 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage3' && (
                      <ShaderImage3 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage4' && (
                      <ShaderImage4 width={300} height={300} />
                    )}
                  </div>
                )}
                {!product.shaderPath && (
                  <img
                    src={`/images/product${product.id}.jpg`}
                    alt={product.name}
                    className="rounded-lg mb-4"
                  />
                )}
                <h2>{product.name}</h2>
              </div>
            </Link>
          ))}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/products/[id]/page.js:

// src/app/products/[id]/page.js

import Link from 'next/link';
// import Head from 'next/head';
import Header from '../../../components/Header';
import AddToCartButton from '../../../components/AddToCartButton';
import ShaderImage1 from '../../../components/ShaderImage1';
import ShaderImage2 from '../../../components/ShaderImage2';
import ShaderImage3 from '../../../components/ShaderImage3';
import ShaderImage4 from '../../../components/ShaderImage4';
import { getProductById, getProducts } from '../../../databases/products';

// const mockProducts = [
//   {
//     id: 1,
//     name: 'Smooth Amulet',
//     description: 'Description for Product 1',
//     image: '/images/product1.jpg',
//     price: 10.99,
//   },
//   {
//     id: 2,
//     name: 'Deep Amulet',
//     description: 'Description for Product 2',
//     image: '/images/product2.jpg',
//     price: 20.99,
//   },
//   {
//     id: 3,
//     name: 'Fractal Amulet',
//     description: 'Description for Product 3',
//     image: '/images/product3.jpg',
//     price: 30.99,
//   },
//   {
//     id: 4,
//     name: 'Spherical Amulet',
//     description: 'Description for Product 4',
//     image: '/images/product4.jpg',
//     price: 40.99,
//   },
// ];

export async function generateStaticParams() {
  const products = await getProducts();
  return products.map((product) => ({
    id: product.id.toString(),
  }));
}

export const metadata = {
  title: 'Product Info',
  description: 'Overview of all available amulets.',
};

export default async function ProductPage({ params }) {
  const product = await getProductById(Number(params.id));

  if (!product) {
    return <p>Product not found</p>;
  }

  return (
    <div>
      {/* <Head>
        <title>Product Info</title>
        <meta name="description" content="Overview of all available amulets." />
      </Head> */}
      <div className="container mx-auto p-6">
        <Header />
        <div className="rounded-lg bg-yellow-50 bg-opacity-60 overflow-hidden shadow-md p-6 flex">
          {product.shaderPath && (
            <div className="mr-8">
              {product.shaderPath === 'ShaderImage1' && (
                <ShaderImage1 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage2' && (
                <ShaderImage2 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage3' && (
                <ShaderImage3 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage4' && (
                <ShaderImage4 width={300} height={300} />
              )}
            </div>
          )}
          {!product.shaderPath && (
            <img
              src={product.image}
              alt={product.name}
              className="mr-8"
              style={{ width: '300px', height: '300px', objectFit: 'cover' }}
              data-test-id="product-image"
            />
          )}
          <div>
            <h1 className="text-2xl font-bold mb-4">{product.name}</h1>
            <p
              className="text-xl font-semibold mb-4"
              data-test-id="product-price"
            >
              {typeof product.price === 'number'
                ? `$${product.price.toFixed(2)}`
                : 'Price not available'}
            </p>
            <p className="mb-8">{product.description}</p>
            <AddToCartButton product={product} />
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/databases/products.ts:

// src/databases/products.ts

import { sql } from '../utils/connect';

export async function getProducts() {
  return await sql`
    SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products
  `;
}

export async function getProductById(id) {
  const [product] = await sql`
    SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products WHERE id = ${id}
  `;
  return product;
}

----------------------------------------

// src/utils/connect.ts:

import 'server-only';
import postgres from 'postgres';
import { config } from 'dotenv';

config();

export const sql = postgres({
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

