// src/components/AddToCartButton.js:

'use client';

import { useState } from 'react';
import { useCart } from '../context/CartContext';
import { TextField, Button } from '@mui/material';

export default function AddToCartButton({ product }) {
  const [quantity, setQuantity] = useState(1);
  const { addToCart } = useCart();

  const handleQuantityChange = (e) => {
    const inputValue = parseInt(e.target.value, 10) || 0; // Ensure a valid number or 0
    setQuantity(inputValue < 1 ? 1 : inputValue); // Set to 1 if less than 1
  };

  const handleAddToCart = () => {
    addToCart(product, quantity);
  };

  return (
    <div>
      <div className="flex items-center mt-5 mb-4">
        <TextField
          type="number"
          id="quantity"
          name="quantity"
          label="Quantity"
          variant="outlined"
          size="small"
          value={quantity}
          onChange={handleQuantityChange}
          inputProps={{ min: 1 }}
          data-test-id="product-quantity"
          sx={{ marginRight: '1rem', width: '100px', backgroundColor: 'white' }}
        />
      </div>
      <button
        onClick={handleAddToCart}
        className="btn-turqoise mt-5"
        data-test-id="product-add-to-cart"
      >
        Add to Cart
      </button>
      {/* <button
        onClick={handleAddToCart}
        className="btn-turqoise mt-5"
        data-test-id="update-quantity"
      >
        Update Quantity
      </button> */}
    </div>
  );
}

----------------------------------------

// src/components/Footer.js:

// src/components/Footer.js
import React from 'react';

const Footer = () => {
  return (
    <footer className="bg-dark text-yellow-50 p-4 text-center">
      <p>Â© Alex Arroyo 2024</p>
    </footer>
  );
};

export default Footer;

----------------------------------------

// src/components/Header.js:

'use client';

import Link from 'next/link';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';
import { useCart } from '../context/CartContext';
import { useEffect, useState } from 'react';

export default function Header() {
  const { cart } = useCart();
  const [cartCount, setCartCount] = useState(0);

  useEffect(() => {
    setCartCount(cart.reduce((total, product) => total + product.quantity, 0));
  }, [cart]);

  return (
    <header className="mb-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl sm:text-2xl font-bold mb-0">
          The Digital Amulet Vault
        </h1>
        <Link href="/cart" className="ml-4" data-test-id="cart-link">
          <button className="bg-teal-500 text-yellow-50 px-6 py-3 rounded hover:bg-teal-600 flex items-center justify-center">
            <FontAwesomeIcon
              icon={faShoppingCart}
              className="text-yellow-50 text-xl"
            />
            <span className="ml-2 text-sm" data-test-id="cart-count">
              {cartCount}
            </span>
          </button>
        </Link>
      </div>
      <div className="bg-dark py-2 text-white rounded-lg mt-4">
        <Link
          href="/"
          className="ml-3 text-yellow-500 hover:text-yellow-50 no-underline"
          data-test-id="products-link"
        >
          <span>Products</span>
        </Link>
      </div>
    </header>
  );
}

----------------------------------------

// src/components/ShaderImage1.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = fragCoord / iResolution.xy;
  vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));
  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage1 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return <canvas ref={canvasRef} width={width} height={height} />;
};

export default ShaderImage1;

----------------------------------------

// src/components/ShaderImage2.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Pixel coordinates normalizadas (de 0 a 1)
  vec2 uv = fragCoord / iResolution.xy;

  // Coordenadas de centro
  vec2 center = uv - 0.5;

  // Distancia desde el centro
  float dist = length(center);

  // Efecto de onda variando con el tiempo
  float wave = sin(dist * 10.0 - iTime * 2.0) * 0.1;

  // Ajustar el color basado en el efecto de onda
  vec3 col = mix(vec3(0.6, 0.1, 0.7), vec3(1.0, 0.5, 0.8), uv.y) + wave;

  // Salida a pantalla
  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage2 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage2;

----------------------------------------

// src/components/ShaderImage3.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = fragCoord / iResolution.xy;
  uv = uv * 2.0 - 1.0;
  uv.x *= iResolution.x / iResolution.y;

  float scale = 2.5;
  float rotationSpeed = 0.02; // Reducir la velocidad de rotaciÃ³n
  float zoomSpeed = 0.01;     // Reducir la velocidad de zoom

  // Aumentar y reducir la escala de los fractales con el tiempo
  float t = iTime * zoomSpeed;
  scale /= sin(0.5 * t) * 0.5 + 1.0; // Oscilar entre aumentar y disminuir

  // Rotar los fractales con el tiempo
  float angle = iTime * rotationSpeed;
  mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));

  vec3 col = vec3(0.0);
  vec2 z = uv * scale;

  // Ajustar la animaciÃ³n de color
  float hue = atan(z.y, z.x) + sin(iTime * 0.1) * 10.0; // Reducir velocidad de hue
  z *= rot; // Aplicar la rotaciÃ³n

  vec2 c = vec2(0.355, 0.355);
  float iters = 0.0;

  for (int i = 0; i < 256; i++) {
    if (dot(z, z) > 4.0) break;
    z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;
    iters += 1.0;
  }

  // Convertir iters en color RGB y suavizar los colores
  float normIters = iters / 256.0;
  col = vec3(0.5 + 0.3 * sin(6.28318 * (normIters + vec3(0.0, 0.33, 0.67) + hue)));

  // AÃ±adir una iluminaciÃ³n central mÃ¡s suave
  float distance = length(uv);
  vec3 background = vec3(0.5 + 0.5 * sin(iTime * 0.1 + uv.xyx + vec3(0,2,4))); // Fondo cambiante mÃ¡s lento
  col = mix(background, col, smoothstep(1.0, 0.6, distance));

  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage3 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage3;

----------------------------------------

// src/components/ShaderImage4.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

// ShaderToy GLSL code

// Function to generate 2D noise - can be used for movement
float noise(vec2 p) {
  return fract(sin(dot(p ,vec2(127.1,311.7))) * 43758.5453123);
}

// Interpolated noise function for smooth transitions
float smoothNoise(vec2 p) {
  vec2 inter = fract(p);
  p = floor(p);
  float a = noise(p);
  float b = noise(p + vec2(1.0, 0.0));
  float c = noise(p + vec2(0.0, 1.0));
  float d = noise(p + vec2(1.0, 1.0));
  float u = inter.x * inter.x * (3.0 - 2.0 * inter.x);
  float v = inter.y * inter.y * (3.0 - 2.0 * inter.y);
  return mix(a, b, u) + (c - a) * v * (1.0 - u) + (d - b) * u * v;
}

// 3D Perlin noise function for dynamic movements inside the sphere
float perlinNoise(vec3 p) {
  float total = 0.0;
  float frequency = 1.0;
  float amplitude = 1.0;
  for (int i = 0; i < 4; i++) {
    total += smoothNoise(p.xy * frequency) * amplitude;
    frequency *= 2.0;
    amplitude /= 2.0;
  }
  return total;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Normalized coordinates [0,1]
  vec2 uv = fragCoord / iResolution.xy;
  uv = uv * 2.0 - 1.0;
  uv.x *= iResolution.x / iResolution.y;

  // Settings for Sphere
  vec3 camPos = vec3(0.0, 0.0, -5.0);
  vec3 ro = camPos;
  vec3 rd = normalize(vec3(uv, 1.0));

  float time = iTime * 0.5;
  vec3 spherePos = vec3(sin(time) * 1.0, sin(time * 0.7) * 1.0, 5.0);
  float sphereRadius = 5.0; // Considerable larger sphere

  // Sphere Rendering
  float A = dot(rd, rd);
  float B = 2.0 * dot(rd, ro - spherePos);
  float C = dot(ro - spherePos, ro - spherePos) - sphereRadius * sphereRadius;

  float D = B * B - 4.0 * A * C;

  if (D < 0.0) {
    // No hit, pastel pink background
    fragColor = vec4(1.0, 0.9, 0.9, 1.0);
    return;
  }

  // Calculate intersection distance
  float t = (-B - sqrt(D)) / (2.0 * A);

  // Intersection point and normal
  vec3 intersectPos = ro + t * rd;
  vec3 normal = normalize(intersectPos - spherePos);

  // Light Direction
  vec3 lightDir = normalize(vec3(-0.5, 1.0, -1.0));

  // Basic Diffuse Lighting
  float diffuse = max(dot(normal, lightDir), 0.0);

  // Add dynamic Perlin noise for internal organic movement
  float noiseValue = perlinNoise(intersectPos + vec3(0.0, 0.0, iTime * 0.5));

  // Combine colors and lighting
  vec3 color = vec3(0.3, 0.6, 0.9) * diffuse;
  color += vec3(0.1, 0.1, 0.5) * noiseValue;

  fragColor = vec4(color, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage4 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage4;

----------------------------------------

