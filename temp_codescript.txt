// src/app/productspage/page.tsx:

// src/app/productspage/page.tsx

import { sql } from '../../utils/connect';
import { Product } from '../../types/Product';
import ShaderImage1 from '../../components/ShaderImage1';
import ShaderImage2 from '../../components/ShaderImage2';
import ShaderImage3 from '../../components/ShaderImage3';
import ShaderImage4 from '../../components/ShaderImage4';
import Image from 'next/image';
import Link from 'next/link';

type ProductLinkProps = {
  product: Product;
};

const ProductLink: React.FC<ProductLinkProps> = ({ product }) => {
  const href = `/product/${product.id}` as const;

  return (
    <Link
      href={href}
      key={product.id}
      data-test-id={`product-${product.id}`}
      className="product-card"
    >
      <div style={{ cursor: 'pointer' }}>
        {product.shaderPath && (
          <div className="rounded-lg overflow-hidden">
            {product.shaderPath === 'ShaderImage1' && (
              <ShaderImage1 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage2' && (
              <ShaderImage2 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage3' && (
              <ShaderImage3 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage4' && (
              <ShaderImage4 width={300} height={300} />
            )}
          </div>
        )}
        {!product.shaderPath && (
          <Image
            src={product.image}
            alt={product.name}
            width={300}
            height={300}
            className="rounded-lg mb-4"
          />
        )}
        <h2>{product.name}</h2>
      </div>
    </Link>
  );
};

const ProductsPage: React.FC = async () => {
  let products: Product[] = [];

  try {
    products = await sql`SELECT * FROM products`;
  } catch (error) {
    console.error('Error fetching products:', error);
    return (
      <div className="container mx-auto p-6 pt-0">
        <p>Error fetching products</p>
      </div>
    );
  }

  if (!products || products.length === 0) {
    return <p>No products found</p>;
  }

  return (
    <div className="container mx-auto p-6 pt-0">
      <div className="product-list">
        TEST 280624/1258
        {products.map((product) => (
          <ProductLink product={product} key={product.id} />
        ))}
      </div>
    </div>
  );
};

export default ProductsPage;

----------------------------------------

// src/databases/products.ts:

// src/databases/products.ts

import { sql } from '../utils/connect';
import { Product } from '../types/Product';

export async function getProducts(): Promise<Product[]> {
  try {
    const products = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products
    `;
    return products;
  } catch (error) {
    console.error('Error fetching products from database:', error);
    return [];
  }
}

export async function getProductById(id: number): Promise<Product | null> {
  try {
    const [product] = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products WHERE id = ${id}
    `;
    return product || null;
  } catch (error) {
    console.error('Error fetching product by ID from database:', error);
    return null;
  }
}

----------------------------------------

// ley.config.mjs:

// ley.config.mjs
import {
  postgresConfig,
  setEnvironmentVariables,
} from './src/utils/config.mjs';

setEnvironmentVariables();

export default {
  ...postgresConfig,
};

----------------------------------------

// src/utils/connect.ts:

// src/utils/connect.ts

import 'server-only';
import postgres from 'postgres';
import { config } from 'dotenv';

config();

export const sql = postgres({
  host: process.env.PGHOST,
  port: Number(process.env.PGPORT),
  database: process.env.PGDATABASE,
  username: process.env.PGUSERNAME,
  password: process.env.PGPASSWORD,
  ssl:
    process.env.NODE_ENV === 'production'
      ? { rejectUnauthorized: false }
      : undefined,
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

// migrations/00000-createProductsTable.ts:

import sql, { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE products (
      id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      name VARCHAR(30) NOT NULL,
      type VARCHAR(30),
      description TEXT,
      price NUMERIC,
      shader_path VARCHAR(255) NOT NULL
    )
    `;
}

export async function down(sql: Sql) {
  await sql`
    DROP TABLE products
    `;
}

----------------------------------------

// migrations/00001-populateProductsTable.ts:

import { Sql } from 'postgres';

const products = [
  {
    name: 'Lucky Charm',
    description: 'A digital amulet that brings good luck.',
    price: 19.99,
    shaderPath: 'ShaderImage1',
  },
  {
    name: 'Health Talisman',
    description: 'A digital talisman that promotes health and well-being.',
    price: 29.99,
    shaderPath: 'ShaderImage2',
  },
  {
    name: 'Wealth Amulet',
    description: 'A digital amulet that attracts wealth and prosperity.',
    price: 9.99,
    shaderPath: 'ShaderImage3',
  },
  {
    name: 'Protection Sigil',
    description: 'A digital sigil that offers protection from harm.',
    price: 14.99,
    shaderPath: 'ShaderImage4',
  },
];

export async function up(sql: Sql) {
  for (const product of products) {
    await sql`
      INSERT INTO products (name, description, price, shader_path) VALUES (
        ${product.name},
        ${product.description},
        ${product.price},
        ${product.shaderPath}
      )
    `;
  }
}

export async function down(sql: Sql) {
  for (const product of products) {
    await sql`
      DELETE FROM products WHERE
        name = ${product.name}
    `;
  }
}

----------------------------------------

