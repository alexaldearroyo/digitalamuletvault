// src/app/productspage/page.tsx:

import Link from 'next/link';
import Header from '../../components/Header';
import ShaderImage1 from '../../components/ShaderImage1';
import ShaderImage2 from '../../components/ShaderImage2';
import ShaderImage3 from '../../components/ShaderImage3';
import ShaderImage4 from '../../components/ShaderImage4';
import { getProducts } from '../../databases/products';
import { Product } from '../../types/Product';
import React from 'react';
import Image from 'next/image';

export default async function ProductsPage() {
  let products: Product[] = [];

  try {
    products = await getProducts();
    console.log(products); // Verifica que los productos se obtienen correctamente
  } catch (error) {
    console.error('Error fetching products:', error);
    return <p>Error fetching products</p>;
  }

  if (!products || products.length === 0) {
    return <p>No products found</p>;
  }

  return (
    <div>
      <div className="container mx-auto p-6">
        <Header />
        <div className="product-list">
          TEST 280624/1123
          {products.map((product) => (
            <Link
              href={`/products/${product.id}`}
              key={product.id}
              data-test-id={`product-${product.id}`}
            >
              <div className="product-card">
                {product.shaderPath && (
                  <div className="rounded-lg overflow-hidden">
                    {product.shaderPath === 'ShaderImage1' && (
                      <ShaderImage1 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage2' && (
                      <ShaderImage2 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage3' && (
                      <ShaderImage3 width={300} height={300} />
                    )}
                    {product.shaderPath === 'ShaderImage4' && (
                      <ShaderImage4 width={300} height={300} />
                    )}
                  </div>
                )}
                {!product.shaderPath && (
                  <Image
                    src={product.image}
                    alt={product.name}
                    width={300}
                    height={300}
                    className="rounded-lg mb-4"
                  />
                )}
                <h2>{product.name}</h2>
              </div>
            </Link>
          ))}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/databases/products.ts:

// src/databases/products.ts

import { sql } from '../utils/connect';
import { Product } from '../types/Product';

export async function getProducts(): Promise<Product[]> {
  try {
    const products = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products
    `;
    return products;
  } catch (error) {
    console.error('Error fetching products from database:', error);
    return [];
  }
}

export async function getProductById(id: number): Promise<Product | null> {
  try {
    const [product] = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products WHERE id = ${id}
    `;
    return product || null;
  } catch (error) {
    console.error('Error fetching product by ID from database:', error);
    return null;
  }
}

----------------------------------------

// migrations/00000-createProductsTable.ts:

import sql, { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE products (
      id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      name VARCHAR(30) NOT NULL,
      type VARCHAR(30),
      description TEXT,
      price NUMERIC,
      shader_path VARCHAR(255) NOT NULL
    )
    `;
}

export async function down(sql: Sql) {
  await sql`
    DROP TABLE products
    `;
}

----------------------------------------

// migrations/00001-populateProductsTable.ts:

import { Sql } from 'postgres';

const products = [
  {
    name: 'Lucky Charm',
    description: 'A digital amulet that brings good luck.',
    price: 19.99,
    shaderPath: 'ShaderImage1',
  },
  {
    name: 'Health Talisman',
    description: 'A digital talisman that promotes health and well-being.',
    price: 29.99,
    shaderPath: 'ShaderImage2',
  },
  {
    name: 'Wealth Amulet',
    description: 'A digital amulet that attracts wealth and prosperity.',
    price: 9.99,
    shaderPath: 'ShaderImage3',
  },
  {
    name: 'Protection Sigil',
    description: 'A digital sigil that offers protection from harm.',
    price: 14.99,
    shaderPath: 'ShaderImage4',
  },
];

export async function up(sql: Sql) {
  for (const product of products) {
    await sql`
      INSERT INTO products (name, description, price, shader_path) VALUES (
        ${product.name},
        ${product.description},
        ${product.price},
        ${product.shaderPath}
      )
    `;
  }
}

export async function down(sql: Sql) {
  for (const product of products) {
    await sql`
      DELETE FROM products WHERE
        name = ${product.name}
    `;
  }
}

----------------------------------------

// fly.toml:

app = "digital-amulet-vault"
primary_region = "otp"

[mounts]
  source = "postgres"
  destination = "/postgres-volume"

[env]
  PORT = "8080"

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true

----------------------------------------

// .env:

PGHOST=localhost
PGPORT=5432
PGDATABASE=nextjs_ecommerce_store
PGUSERNAME=nextjs_ecommerce_store
PGPASSWORD=nextjs_ecommerce_store

----------------------------------------

// .env.example:

PGHOST=
PGPORT=
PGDATABASE=
PGUSERNAME=
PGPASSWORD=

----------------------------------------

// .env:

PGHOST=localhost
PGPORT=5432
PGDATABASE=nextjs_ecommerce_store
PGUSERNAME=nextjs_ecommerce_store
PGPASSWORD=nextjs_ecommerce_store

----------------------------------------

// Dockerfile:

# Dockerfile

FROM node:lts-alpine AS builder

# Install necessary tools
RUN apk add --no-cache libc6-compat yq --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy the project content
COPY . .

# Combine dependencies
RUN yq --inplace --output-format=json '(.dependencies = .dependencies * (.devDependencies | to_entries | map(select(.key | test("^(autoprefixer|daisyui|tailwindcss|typescript|@types/*|eslint-config-upleveled)$"))) | from_entries)) | (.devDependencies = {})' package.json

# Set specific environment variables for the build
ENV BUILD_ENV=true

# Install dependencies and build the application
RUN pnpm install
RUN pnpm build

# Execution stage
FROM node:lts-alpine AS runner

ENV NODE_ENV production

# Install necessary tools
RUN apk add bash postgresql
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy the built application
COPY --from=builder /app/.next ./.next

# Copy only files necessary to run the application
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/migrations ./migrations
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./
COPY --from=builder /app/next.config.mjs ./

# Copy startup scripts and make them executable
COPY --from=builder /app/scripts ./scripts
RUN chmod +x /app/scripts/fly-io-start.sh

CMD ["./scripts/fly-io-start.sh"]

----------------------------------------

// ley.config.mjs:

// ley.config.mjs
import {
  postgresConfig,
  setEnvironmentVariables,
} from './src/utils/config.mjs';

setEnvironmentVariables();

export default {
  ...postgresConfig,
};

----------------------------------------

