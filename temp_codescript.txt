// src/app/layout.js:

import { Inter } from 'next/font/google';
import './globals.css';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { fab } from '@fortawesome/free-brands-svg-icons';
import { CartProvider } from '../context/CartContext';

library.add(fas, fab);

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Digital Amulet Vault',
  description: 'Get the charms from the interwebs',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body className={inter.className}>
        <CartProvider>{children}</CartProvider>
      </body>
    </html>
  );
}

----------------------------------------

// src/app/products/[id]/page.js

import Link from 'next/link';
import Header from '../../../components/Header';
import AddToCartButton from '../../../components/AddToCartButton';

const mockProducts = [
  {
    id: 1,
    name: 'Product 1',
    description: 'Description for Product 1',
    image: '/images/product1.jpg',
    price: 10.99,
  },
  {
    id: 2,
    name: 'Product 2',
    description: 'Description for Product 2',
    image: '/images/product2.jpg',
    price: 20.99,
  },
  {
    id: 3,
    name: 'Product 3',
    description: 'Description for Product 3',
    image: '/images/product3.jpg',
    price: 30.99,
  },
  {
    id: 4,
    name: 'Product 4',
    description: 'Description for Product 4',
    image: '/images/product4.jpg',
    price: 40.99,
  },
];

export function generateStaticParams() {
  return mockProducts.map((product) => ({
    id: product.id.toString(),
  }));
}

export default function ProductPage({ params }) {
  const product = mockProducts.find(
    (product) => product.id.toString() === params.id,
  );

  if (!product) {
    return <p>Product not found</p>;
  }

  return (
    <div className="container mx-auto p-6">
      <Header />
      <div className="product-detail">
        <h1 className="text-2xl font-bold mb-4">{product.name}</h1>
        <img
          src={product.image}
          alt={product.name}
          className="mb-4"
          data-test-id="product-image"
        />
        <p>{product.description}</p>
        <p className="text-xl font-semibold mb-4" data-test-id="product-price">
          {product.price}
        </p>
        <AddToCartButton product={product} />
      </div>
    </div>
  );
}

----------------------------------------

// src/app/page.js:

import Link from 'next/link';
import Header from '../components/Header';

// change name of function later
const mockProducts = [
  { id: 1, name: 'Product 1' },
  { id: 2, name: 'Product 2' },
  { id: 3, name: 'Product 3' },
  { id: 4, name: 'Product 4' },
];

export default function ProductsPage() {
  return (
    <div className="container mx-auto p-6">
      <Header />
      <div className="product-list">
        {mockProducts.map((product) => (
          <Link
            href={`/products/${product.id}`}
            key={product.id}
            data-test-id={`product-${product.id}`}
          >
            <div className="product-card">
              <h2>{product.name}</h2>
            </div>
          </Link>
        ))}
      </div>
    </div>
  );
}

----------------------------------------

// src/app/checkout/page.js:

'use client';

import Link from 'next/link';
import Header from '../../components/Header';
import { useState, useEffect } from 'react';
import Cookies from 'js-cookie';
import { useRouter } from 'next/router';

const CheckoutPage = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    address: '',
    city: '',
    postalCode: '',
    country: '',
    creditCard: '',
    expirationDate: '',
    securityCode: '',
  });
  const [error, setError] = useState('');
  const [isClient, setIsClient] = useState(false);

  useEffect(() => {
    if (typeof window !== 'undefined') {
      setIsClient(true);
    }
  }, []);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    // Form validation
    for (let key in formData) {
      if (formData[key] === '') {
        setError('All fields are required');
        return;
      }
    }

    // Clear the cart cookies
    Cookies.remove('cart');

    if (isClient) {
      // Use router after checking it's client-side
      const router = useRouter();
      router.push('/thank-you');
    }
  };

  const {
    firstName,
    lastName,
    email,
    address,
    city,
    postalCode,
    country,
    creditCard,
    expirationDate,
    securityCode,
  } = formData;

  return (
    <div className="container mx-auto p-6">
      <Header />
      <main className="mt-8">
        <p className="text-lg text-gray-600 mb-6">
          {/* Replace "show total" with actual total amount */}
          Total Amount: $100
        </p>

        <form onSubmit={handleSubmit} className="space-y-4">
          <div>
            <label>
              First Name:
              <input
                type="text"
                name="firstName"
                value={firstName}
                data-test-id="checkout-first-name"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Last Name:
              <input
                type="text"
                name="lastName"
                value={lastName}
                data-test-id="checkout-last-name"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Email:
              <input
                type="email"
                name="email"
                value={email}
                data-test-id="checkout-email"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Address:
              <input
                type="text"
                name="address"
                value={address}
                data-test-id="checkout-address"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              City:
              <input
                type="text"
                name="city"
                value={city}
                data-test-id="checkout-city"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Postal Code:
              <input
                type="text"
                name="postalCode"
                value={postalCode}
                data-test-id="checkout-postal-code"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Country:
              <input
                type="text"
                name="country"
                value={country}
                data-test-id="checkout-country"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Credit Card:
              <input
                type="text"
                name="creditCard"
                value={creditCard}
                data-test-id="checkout-credit-card"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Expiration Date:
              <input
                type="text"
                name="expirationDate"
                value={expirationDate}
                data-test-id="checkout-expiration-date"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          <div>
            <label>
              Security Code:
              <input
                type="text"
                name="securityCode"
                value={securityCode}
                data-test-id="checkout-security-code"
                onChange={handleChange}
                className="border-gray-300 rounded p-2 w-full"
              />
            </label>
          </div>

          {error && <p className="text-red-500">{error}</p>}

          <div>
            <button
              type="submit"
              data-test-id="checkout-confirm-order"
              className="bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600 transition duration-300"
            >
              Confirm Order
            </button>
          </div>
        </form>

        <Link href="/">
          <span className="inline-block bg-blue-500 text-white px-6 py-3 rounded mt-4 hover:bg-blue-600 transition duration-300">
            Continue Shopping
          </span>
        </Link>
      </main>
    </div>
  );
};

export default CheckoutPage;

----------------------------------------

// src/app/cart/page.js:

'use client';

import { useCart } from '../../context/CartContext';
import Link from 'next/link';
import Header from '../../components/Header';

export default function CartPage() {
  const { cart, removeFromCart } = useCart();
  const totalPrice = cart.reduce(
    (total, product) => total + product.price * product.quantity,
    0,
  );

  return (
    <div className="container mx-auto p-6">
      <Header />
      <div className="cart bg-white rounded-lg shadow-md p-8">
        {cart.length === 0 ? (
          <p className="text-center text-gray-600">No products in the cart.</p>
        ) : (
          <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
            {cart.map((product) => (
              <div
                className="cart-product bg-gray-100 rounded-lg p-4 flex flex-col"
                key={product.id}
                data-test-id={`cart-product-${product.id}`}
              >
                <div className="flex-grow">
                  <h2 className="text-lg font-medium text-gray-700">
                    {product.name}
                  </h2>
                  <p
                    className="text-gray-500"
                    data-test-id={`cart-product-quantity-${product.id}`}
                  >
                    Quantity: {product.quantity}
                  </p>
                </div>
                <div className="flex-shrink mt-auto">
                  <p className="text-gray-500">
                    Subtotal: {(product.price * product.quantity).toFixed(2)}
                  </p>
                  <button
                    className="text-red-500 hover:underline mt-2"
                    onClick={() => removeFromCart(product.id)}
                    data-test-id={`cart-product-remove-${product.id}`}
                  >
                    Remove
                  </button>
                </div>
              </div>
            ))}
          </div>
        )}
        {cart.length > 0 && (
          <div className="mt-6">
            <p className="text-gray-600" data-test-id="cart-total">
              Total: {totalPrice.toFixed(2)}
            </p>
            <Link href="/checkout">
              <button
                className="btn-checkout mt-4 rounded"
                data-test-id="cart-checkout"
                style={{
                  backgroundColor: '#4CAF50',
                  color: 'white',
                  padding: '12px 24px',
                }}
              >
                Checkout
              </button>
            </Link>
          </div>
        )}
      </div>
    </div>
  );
}

----------------------------------------

// src/app/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gray-100 text-gray-900;
}

.product-list {
  @apply grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6;
}

.product-card {
  @apply bg-white shadow-md rounded-lg overflow-hidden transition-transform transform hover:scale-105;
}

.product-card h2 {
  @apply text-lg font-semibold p-4;
}

@font-face {
  font-family: 'Pilowlava';
  src: url('/Pilowlava-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

.text-4xl {
  font-family: 'Pilowlava', sans-serif;
}

----------------------------------------

// src/components/AddToCartButton.js:

'use client';

import { useState } from 'react';
import { useCart } from '../context/CartContext';

export default function AddToCartButton({ product }) {
  const [quantity, setQuantity] = useState(1);
  const { addToCart } = useCart();

  const handleQuantityChange = (e) => {
    const inputValue = parseInt(e.target.value, 10) || 0; // Ensure a valid number or 0
    setQuantity(inputValue < 1 ? 1 : inputValue); // Set to 1 if less than 1
  };

  const handleAddToCart = () => {
    addToCart(product, quantity);
    // Logic to add to cart
    console.log(`Added ${product.name} to cart with quantity: ${quantity}`);
  };

  return (
    <div>
      <div className="flex items-center mb-4">
        <label htmlFor="quantity" className="mr-2">
          Quantity:
        </label>
        <input
          type="number"
          id="quantity"
          name="quantity"
          min="1" // Set minimum value to 1
          value={quantity}
          onChange={handleQuantityChange} // Use the modified change handler
          className="border p-2"
          data-test-id="product-quantity"
        />
      </div>
      <button
        onClick={handleAddToCart}
        className="bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600"
        data-test-id="product-add-to-cart"
      >
        Add to Cart
      </button>
    </div>
  );
}

----------------------------------------

// src/components/Header.js:

'use client';

import Link from 'next/link';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';
import { useCart } from '../context/CartContext';
import { useEffect, useState } from 'react';

export default function Header() {
  const { cart } = useCart();
  const [cartCount, setCartCount] = useState(0);

  useEffect(() => {
    setCartCount(cart.reduce((total, product) => total + product.quantity, 0));
  }, [cart]);

  return (
    <header className="mb-8 flex justify-between items-center">
      <div>
        <h1 className="text-4xl font-bold mb-4">The Digital Amulet Vault</h1>
        <Link href="/" className="ml-4" data-test-id="products-link">
          <span className="text-blue-500 hover:underline">Products</span>
        </Link>
      </div>
      <Link href="/cart" className="ml-4" data-test-id="cart-link">
        <button className="bg-blue-500 text-white px-6 py-3 rounded hover:bg-blue-600 flex items-center justify-center">
          <FontAwesomeIcon
            icon={faShoppingCart}
            className="text-white text-xl"
          />
          <span className="ml-2 text-sm">{cartCount}</span>
        </button>
      </Link>
    </header>
  );
}

----------------------------------------

// src/context/CartContext.js:

// Context that manages the cart state globally
'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import Cookies from 'js-cookie';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cart, setCart] = useState(() => {
    // Read Cart's cookies once the app is initialized.
    const savedCart = Cookies.get('cart');
    return savedCart ? JSON.parse(savedCart) : [];
  });

  useEffect(() => {
    // Save cart's status onto cookies whenever it changes
    if (cart.length > 0) {
      Cookies.set('cart', JSON.stringify(cart), { expires: 7 });
    } else {
      Cookies.remove('cart'); // Delete cookies if cart's empty
    }
  }, [cart]);

  const addToCart = (product, quantity) => {
    setCart((prevCart) => {
      const existingProduct = prevCart.find((item) => item.id === product.id);
      if (existingProduct) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item,
        );
      }
      return [...prevCart, { ...product, quantity }];
    });
  };

  const removeFromCart = (productId) => {
    setCart((prevCart) => prevCart.filter((item) => item.id !== productId));
  };

  return (
    <CartContext.Provider value={{ cart, addToCart, removeFromCart }}>
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);

----------------------------------------

// src/fontawesome.js:

import { library } from '@fortawesome/fontawesome-svg-core';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';

library.add(faShoppingCart);

----------------------------------------

