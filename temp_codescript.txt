// src/app/cart/page.js:

'use client'; // Component only runs on the client (browser).

import { useCart } from '../../context/CartContext';
import Link from 'next/link';
import Header from '../../components/Header';
import Head from 'next/head';

export default function CartPage() {
  const { cart, removeFromCart } = useCart(); // Import the methods and data from the context of the cart.

  // Calculate total price
  const totalPrice = cart.reduce(
    (total, product) => total + product.price * product.quantity,
    0,
  );

  return (
    <div>
      <Head>
        <title>Cart</title>
        <meta
          name="description"
          content="Cart page showing products ready to be checked out."
        />
      </Head>
      <div className="container mx-auto p-6">
        <Header />
        <div className="cart bg-yellow-50 bg-opacity-75  rounded-lg shadow-md p-8">
          {cart.length === 0 ? (
            <p className="text-center text-gray-600">
              No products in the cart.
            </p>
          ) : (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
              {cart.map(
                (
                  product, // Iterate over products in the cart
                ) => (
                  <div
                    className="cart-product bg-red-50 rounded-lg p-4 flex flex-col shadow-md"
                    key={product.id}
                    data-test-id={`cart-product-${product.id}`}
                  >
                    <div className="flex-grow">
                      <h2 className="text-lg font-medium text-gray-700">
                        {product.name}
                      </h2>
                      <p
                        className="text-gray-500"
                        data-test-id={`cart-product-quantity-${product.id}`}
                      >
                        Quantity: {product.quantity}
                      </p>
                    </div>
                    <div className="flex-shrink mt-auto">
                      <p className="text-gray-500">
                        Subtotal:{' '}
                        {(product.price * product.quantity).toFixed(2)}
                      </p>
                      <button
                        className="text-red-500 hover:underline mt-2"
                        onClick={() => removeFromCart(product.id)}
                        data-test-id={`cart-product-remove-${product.id}`}
                      >
                        Remove
                      </button>
                    </div>
                  </div>
                ),
              )}
            </div>
          )}
          {cart.length > 0 && (
            <div className="mt-6">
              <p className="text-gray-600" data-test-id="cart-total">
                Total: {totalPrice.toFixed(2)}
              </p>
              <Link href="/checkout">
                <button
                  className="btn-turqoise mt-4 rounded"
                  data-test-id="cart-checkout"
                >
                  Checkout
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/components/AddToCartButton.js:

'use client';

import { useState } from 'react';
import { useCart } from '../context/CartContext';
import { TextField, Button } from '@mui/material';

export default function AddToCartButton({ product }) {
  const [quantity, setQuantity] = useState(1);
  const { addToCart } = useCart();

  const handleQuantityChange = (e) => {
    const inputValue = parseInt(e.target.value, 10) || 0; // Ensure a valid number or 0
    setQuantity(inputValue < 1 ? 1 : inputValue); // Set to 1 if less than 1
  };

  const handleAddToCart = () => {
    addToCart(product, quantity);
  };

  return (
    <div>
      <div className="flex items-center mt-5 mb-4">
        <TextField
          type="number"
          id="quantity"
          name="quantity"
          label="Quantity"
          variant="outlined"
          size="small"
          value={quantity}
          onChange={handleQuantityChange}
          inputProps={{ min: 1 }}
          data-test-id="product-quantity"
          sx={{ marginRight: '1rem', width: '100px', backgroundColor: 'white' }}
        />
      </div>
      <button
        onClick={handleAddToCart}
        className="btn-turqoise mt-5"
        data-test-id="product-add-to-cart"
      >
        Add to Cart
      </button>
    </div>
  );
}

----------------------------------------

// src/context/CartContext.js:

'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import {
  getCartFromCookies as getClientCartFromCookies,
  saveCartToCookies,
  removeCartFromCookies,
} from '../utils/cookies';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cart, setCart] = useState(() => {
    return getClientCartFromCookies();
  });

  useEffect(() => {
    if (typeof window !== 'undefined') {
      saveCartToCookies(cart);
    }
  }, [cart]);

  const addToCart = (product, quantity) => {
    setCart((prevCart) => {
      const existingProduct = prevCart.find((item) => item.id === product.id);
      if (existingProduct) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item,
        );
      }
      return [...prevCart, { ...product, quantity }];
    });
  };

  const removeFromCart = (productId) => {
    setCart((prevCart) => {
      const newCart = prevCart.filter((item) => item.id !== productId);
      if (newCart.length === 0) {
        removeCartFromCookies();
      }
      return newCart;
    });
  };

  return (
    <CartContext.Provider value={{ cart, setCart, addToCart, removeFromCart }}>
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);

----------------------------------------

// tests/cart.test.ts:

// tests/cart.test.ts
import { test, expect } from '@playwright/test';

test.describe('Cart Flow', () => {
  test('Add to cart, change quantity and remove from cart', async ({
    page,
  }) => {
    // Ir a la página de productos
    await page.goto('/products/1');

    // Agregar producto al carrito
    await page.click('data-test-id=product-add-to-cart');
    await expect(page.locator('data-test-id=cart-count')).toHaveText('1');

    // Ir al carrito
    await page.click('data-test-id=cart-link');

    // Esperar a que el campo de cantidad esté visible
    const quantityInput = page.locator(
      'input[data-test-id="product-quantity"]',
    );
    await quantityInput.waitFor({ state: 'visible', timeout: 12000 });

    // Cambiar la cantidad del producto en el carrito
    console.log('Filling quantity input');
    await quantityInput.fill('2');

    // Volver a hacer clic en 'Add to Cart' para actualizar la cantidad
    await page.click('data-test-id=product-add-to-cart');

    // Verificar la cantidad actualizada en el carrito
    await expect(
      page.locator('data-test-id=cart-product-quantity-1'),
    ).toHaveText('Quantity: 2');

    // Eliminar producto del carrito
    await page.click('data-test-id=cart-product-remove-1');
    await expect(page.locator('data-test-id=cart-count')).toHaveText('0');
  });
});

----------------------------------------

