// Dockerfile:

FROM node:lts-alpine AS builder

# Install necessary tools
RUN apk add --no-cache libc6-compat yq --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy the content of the project to the machine
COPY . .

RUN yq --inplace --output-format=json '(.devDependencies = (.devDependencies | to_entries | map(select(.key | test("^(@jest/globals|@playwright/test|@ts-safeql/eslint-plugin|jest|jest-environment-jsdom|libpg-query|prettier|prettier-plugin-embed|prettier-plugin-sql|stylelint|stylelint-config-upleveled)$") | not)) | from_entries))' package.json

RUN pnpm install

# Set the NODE_ENV to build during the build phase
ENV NODE_ENV=build

RUN pnpm build

# Multi-stage builds: runner stage
FROM node:lts-alpine AS runner

ENV NODE_ENV production

# Install necessary tools
RUN apk add bash postgresql

RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy built app
COPY --from=builder /app/.next ./.next

# Copy only necessary files to run the app (minimize production app size, improve performance)
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/migrations ./migrations
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./
COPY --from=builder /app/next.config.mjs ./

# Copy start script and make it executable
COPY --from=builder /app/scripts ./scripts
RUN chmod +x /app/scripts/fly-io-start.sh
RUN chmod +x /app/scripts/migrate.sh

CMD ["./scripts/fly-io-start.sh"]

----------------------------------------

// fly.toml:

app = "digital-amulet-vault"
primary_region = "otp"

[mounts]
  source = "postgres"
  destination = "/postgres-volume"

[env]
  PORT = "8080"

[deploy]
  release_command = "./scripts/migrate.sh"

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true

----------------------------------------

// ley.config.mjs:

import { postgresConfig, setEnvironmentVariables } from './src/utils/config.js';

setEnvironmentVariables();

// const options = {
//   transform: {
//     ...postgres.camel,
//     undefined: null,
//   },
// };

export default postgresConfig;

----------------------------------------

// migrations/00000-createProductsTable.ts:

import sql, { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE products (
      id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      name VARCHAR(30) NOT NULL,
      type VARCHAR(30),
      description TEXT,
      price NUMERIC,
      shader_path VARCHAR(255) NOT NULL
    )
    `;
}

export async function down(sql: Sql) {
  await sql`
    DROP TABLE products
    `;
}

----------------------------------------

// migrations/00001-populateProductsTable.ts:

import { Sql } from 'postgres';

const products = [
  {
    name: 'Lucky Charm',
    description: 'A digital amulet that brings good luck.',
    price: 19.99,
    shaderPath: 'path/to/shader1',
  },
  {
    name: 'Health Talisman',
    description: 'A digital talisman that promotes health and well-being.',
    price: 29.99,
    shaderPath: 'path/to/shader2',
  },
  {
    name: 'Wealth Amulet',
    description: 'A digital amulet that attracts wealth and prosperity.',
    price: 9.99,
    shaderPath: 'path/to/shader3',
  },
  {
    name: 'Protection Sigil',
    description: 'A digital sigil that offers protection from harm.',
    price: 14.99,
    shaderPath: 'path/to/shader4',
  },
  {
    name: 'Love Token',
    description: 'A digital token that enhances love and relationships.',
    price: 49.99,
    shaderPath: 'path/to/shader5',
  },
];

export async function up(sql: Sql) {
  for (const product of products) {
    await sql`
      INSERT INTO products (name, description, price, shader_path) VALUES (
        ${product.name},
        ${product.description},
        ${product.price},
        ${product.shaderPath}
      )
    `;
  }
}

export async function down(sql: Sql) {
  for (const product of products) {
    await sql`
      DELETE FROM products WHERE
        name = ${product.name}
    `;
  }
}

----------------------------------------

// next.config.mjs:

/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
};

export default nextConfig;

----------------------------------------

// next-env.d.ts:

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

----------------------------------------

// src/utils/config.js:

import { config } from 'dotenv-safe';
import postgres from 'postgres';

export const postgresConfig = {
  ssl: Boolean(process.env.POSTGRES_URL),
  transform: {
    ...postgres.camel,
    undefined: null,
  },
};

export function setEnvironmentVariables() {
  if (process.env.NODE_ENV === 'production' || process.env.CI) {
    // Set standard environment variables for Postgres.js from
    // Vercel environment variables
    if (process.env.POSTGRES_URL) {
      process.env.PGHOST = process.env.POSTGRES_HOST;
      process.env.PGDATABASE = process.env.POSTGRES_DATABASE;
      process.env.PGUSERNAME = process.env.POSTGRES_USER;
      process.env.PGPASSWORD = process.env.POSTGRES_PASSWORD;
    }
    return;
  }
  config();
}

----------------------------------------

// src/utils/connect.ts:

import 'server-only';
import postgres from 'postgres';
import { config } from 'dotenv';
import { postgresConfig, setEnvironmentVariables } from './config.js';

setEnvironmentVariables();

export const sql = postgres({
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

// tsconfig.json:

{
  "compilerOptions": {
    "target": "esnext",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

