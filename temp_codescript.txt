// migrations/00000-createProductsTable.ts:

import sql, { Sql } from 'postgres';

export async function up(sql: Sql) {
  await sql`
    CREATE TABLE products (
      id INTEGER PRIMARY KEY GENERATED ALWAYS AS IDENTITY,
      name VARCHAR(30) NOT NULL,
      type VARCHAR(30),
      description TEXT,
      price NUMERIC,
      shader_path VARCHAR(255) NOT NULL
    )
    `;
}

export async function down(sql: Sql) {
  await sql`
    DROP TABLE products
    `;
}

----------------------------------------

// migrations/00001-populateProductsTable.ts:

import { Sql } from 'postgres';

const products = [
  {
    name: 'Lucky Charm',
    description: 'A digital amulet that brings good luck.',
    price: 19.99,
    shaderPath: 'ShaderImage1',
  },
  {
    name: 'Health Talisman',
    description: 'A digital talisman that promotes health and well-being.',
    price: 29.99,
    shaderPath: 'ShaderImage2',
  },
  {
    name: 'Wealth Amulet',
    description: 'A digital amulet that attracts wealth and prosperity.',
    price: 9.99,
    shaderPath: 'ShaderImage3',
  },
  {
    name: 'Protection Sigil',
    description: 'A digital sigil that offers protection from harm.',
    price: 14.99,
    shaderPath: 'ShaderImage4',
  },
];

export async function up(sql: Sql) {
  for (const product of products) {
    await sql`
      INSERT INTO products (name, description, price, shader_path) VALUES (
        ${product.name},
        ${product.description},
        ${product.price},
        ${product.shaderPath}
      )
    `;
  }
}

export async function down(sql: Sql) {
  for (const product of products) {
    await sql`
      DELETE FROM products WHERE
        name = ${product.name}
    `;
  }
}

----------------------------------------

// scripts/alpine-postgresql-setup-and-start.sh:

#!/usr/bin/env bash

# Exit if any command exits with a non-zero exit code
set -o errexit

echo "Setting up PostgreSQL on Alpine Linux..."

export PGHOST=/postgres-volume/run/postgresql
export PGDATA="$PGHOST/data"

echo "Adding exclusive data directory permissions for postgres user..."
chmod 0700 "$PGDATA"

echo "Initializing database cluster..."
initdb -D "$PGDATA"

echo "Prepending volume path to Unix Domain Socket path..."
sed -i "s/#unix_socket_directories = '\/run\/postgresql'/unix_socket_directories = '\/postgres-volume\/run\/postgresql'/g" "$PGDATA/postgresql.conf"

echo "Enabling connections on all available IP interfaces..."
echo "listen_addresses='*'" >> "$PGDATA/postgresql.conf"

echo "Starting PostgreSQL..."
pg_ctl start -D "$PGDATA"

echo "Creating database, user and schema..."
psql -U postgres postgres << SQL
  CREATE DATABASE $PGDATABASE;
  CREATE USER $PGUSERNAME WITH ENCRYPTED PASSWORD '$PGPASSWORD';
  GRANT ALL PRIVILEGES ON DATABASE $PGDATABASE TO $PGUSERNAME;
  \\connect $PGDATABASE
  CREATE SCHEMA $PGUSERNAME AUTHORIZATION $PGUSERNAME;
SQL

----------------------------------------

// scripts/fly-io-start.sh:

#!/usr/bin/env bash

# Exit if any command exits with a non-zero exit code
set -o errexit

if [[ ! -f /postgres-volume/run/postgresql/data/postgresql.conf ]]; then
  echo "❗️ No PostgreSQL database found, run the setup script"
  sleep infinity
fi

echo "Setting up PostgreSQL on Fly.io..."
su postgres -c "pg_ctl start -D /postgres-volume/run/postgresql/data"

pnpm migrate up
./node_modules/.bin/next start

----------------------------------------

// scripts/migrate.sh:

#!/bin/bash

# Ensure the environment variables are set
source /app/.env

# Run the migrations
pnpm migrate up

----------------------------------------

// src/app/layout.js:

import { Inter } from 'next/font/google';
import './globals.css';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { fab } from '@fortawesome/free-brands-svg-icons';
import { CartProvider } from '../context/CartContext';
import Footer from '../components/Footer';
import Header from '../components/Header';

library.add(fas, fab);

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Digital Amulet Vault',
  description: 'Get the charms from the interwebs',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${inter.className} min-w-screen min-h-screen flex flex-col`}
      >
        <div className="flex-grow">
          {/* <Header /> */}
          <CartProvider>{children}</CartProvider>
        </div>
        <Footer />
      </body>
    </html>
  );
}

----------------------------------------

// src/app/products/[id]/page.tsx:

// src/app/products/[id]/page.js

import Link from 'next/link';
// import Head from 'next/head';
import { Metadata } from 'next';
import Header from '../../../components/Header';
import AddToCartButton from '../../../components/AddToCartButton';
import ShaderImage1 from '../../../components/ShaderImage1';
import ShaderImage2 from '../../../components/ShaderImage2';
import ShaderImage3 from '../../../components/ShaderImage3';
import ShaderImage4 from '../../../components/ShaderImage4';
import { getProductById, getProducts } from '../../../databases/products';
import { Product } from '../../../types/Product';
import { Params } from '../../../types/Params';
import React from 'react';
import Image from 'next/image';

// const mockProducts = [
//   {
//     id: 1,
//     name: 'Smooth Amulet',
//     description: 'Description for Product 1',
//     image: '/images/product1.jpg',
//     price: 10.99,
//   },
//   {
//     id: 2,
//     name: 'Deep Amulet',
//     description: 'Description for Product 2',
//     image: '/images/product2.jpg',
//     price: 20.99,
//   },
//   {
//     id: 3,
//     name: 'Fractal Amulet',
//     description: 'Description for Product 3',
//     image: '/images/product3.jpg',
//     price: 30.99,
//   },
//   {
//     id: 4,
//     name: 'Spherical Amulet',
//     description: 'Description for Product 4',
//     image: '/images/product4.jpg',
//     price: 40.99,
//   },
// ];

// export const metadata: Metadata = {
//   title: 'Product Info',
//   description: 'Overview of all available amulets.',
// };

export async function generateStaticParams() {
  const products: Product[] = await getProducts();
  return products.map((product) => ({
    id: product.id.toString(),
  }));
}

export default async function ProductPage({ params }: { params: Params }) {
  const product: Product | null = await getProductById(Number(params.id));

  if (!product) {
    return <p>Product not found</p>;
  }

  return (
    <div>
      {/* <t <Head>
        itle>Product Info</title>
        <meta name="description" content="Overview of all available amulets." />
      </Head> */}
      <div className="container mx-auto p-6">
        <Header />
        <div className="rounded-lg bg-yellow-50 bg-opacity-60 overflow-hidden shadow-md p-6 flex">
          {product.shaderPath && (
            <div className="mr-8">
              {product.shaderPath === 'ShaderImage1' && (
                <ShaderImage1 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage2' && (
                <ShaderImage2 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage3' && (
                <ShaderImage3 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage4' && (
                <ShaderImage4 width={300} height={300} />
              )}
            </div>
          )}
          {!product.shaderPath && (
            <Image
              src={product.image} // Add the 'image' property to the 'Product' type
              alt={product.name}
              className="mr-8"
              style={{ width: '300px', height: '300px', objectFit: 'cover' }}
              data-test-id="product-image"
              // src={''}
            />
          )}
          <div>
            <h1 className="text-2xl font-bold mb-4">{product.name}</h1>
            <p
              className="text-xl font-semibold mb-4"
              data-test-id="product-price"
            >
              ${product.price}
            </p>
            <p className="mb-8">{product.description}</p>
            <AddToCartButton product={product} />
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/thankyou/page.tsx:

import Link from 'next/link';
import Header from '../../components/Header';
import { Metadata } from 'next';

// export const metadata: Metadata = {
//   title: 'Thank You Page',
//   description: 'Thank you page after checkout.',
// };

const ThankYouPage: React.FC = () => {
  return (
    <div>
      <div className="container mx-auto p-6">
        <Header />
        <main className="mt-8 text-center">
          <h1 className="text-2xl font-bold mb-4">Thank you for your order</h1>
          <p className="text-lg text-gray-600 mb-6">
            Your order has been placed successfully.
          </p>
          <Link href="/">
            <span className="btn-turqoise">Continue Shopping</span>
          </Link>
        </main>
      </div>
    </div>
  );
};

export default ThankYouPage;

----------------------------------------

// src/app/checkout/page.tsx:

'use client';

import Link from 'next/link';
import { Metadata } from 'next';
import Header from '../../components/Header';
import { useState, ChangeEvent, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '../../context/CartContext';
import { removeCartFromCookies } from '../../utils/cookies';

// export const metadata: Metadata = {
//   title: 'Checkout Page',
//   description: 'Checkout page showing products set to be purchased.',
// };

// Define types for form data and cart item
interface FormData {
  firstName: string;
  lastName: string;
  email: string;
  address: string;
  city: string;
  postalCode: string;
  country: string;
  creditCard: string;
  expirationDate: string;
  securityCode: string;
}

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

const CheckoutPage: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    address: '',
    city: '',
    postalCode: '',
    country: '',
    creditCard: '',
    expirationDate: '',
    securityCode: '',
  });
  const [error, setError] = useState<string>('');

  const { cart, setCart } = useCart();
  const router = useRouter();

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    // Form validation
    for (let key in formData) {
      if (formData[key as keyof typeof formData] === '') {
        setError('All fields are required');
        return;
      }
    }

    // Clear the cart cookies and context
    removeCartFromCookies();
    setCart([]); // Clear the cart context

    // Redirect to the thank you page
    router.push('/thankyou');
  };

  const {
    firstName,
    lastName,
    email,
    address,
    city,
    postalCode,
    country,
    creditCard,
    expirationDate,
    securityCode,
  } = formData;

  const totalPrice = cart
    .reduce(
      (total: number, product: CartItem) =>
        total + product.price * product.quantity,
      0,
    )
    .toFixed(2);

  return (
    <div>
      <div className="min-h-screen py-6 sm:py-12">
        <div className="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8">
          <Header />
        </div>
        <div className="flex items-start justify-center mt-0 sm:mt-2">
          <main className="mt-8 w-full max-w-lg bg-yellow-50 bg-opacity-60 rounded-lg shadow-md">
            <div className="p-4 sm:p-6 lg:p-8">
              <p className="text-lg text-gray-600 mb-6">Total: {totalPrice}</p>
              <hr className="my-4" /> {/* Separator line */}
              <form onSubmit={handleSubmit} className="space-y-4">
                <h2 className="text-xl font-semibold">Shipping Address</h2>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label>
                      First Name:
                      <input
                        type="text"
                        name="firstName"
                        value={firstName}
                        placeholder="Enter First Name"
                        data-test-id="checkout-first-name"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Last Name:
                      <input
                        type="text"
                        name="lastName"
                        value={lastName}
                        placeholder="Enter Last Name"
                        data-test-id="checkout-last-name"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                <div>
                  <label>
                    Email:
                    <input
                      type="email"
                      name="email"
                      value={email}
                      placeholder="Enter Email"
                      data-test-id="checkout-email"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div>
                  <label>
                    Address:
                    <input
                      type="text"
                      name="address"
                      value={address}
                      placeholder="Enter Address"
                      data-test-id="checkout-address"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div>
                  <label>
                    City:
                    <input
                      type="text"
                      name="city"
                      value={city}
                      placeholder="Enter City"
                      data-test-id="checkout-city"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label>
                      Postal Code:
                      <input
                        type="text"
                        name="postalCode"
                        value={postalCode}
                        placeholder="Enter Postal Code"
                        data-test-id="checkout-postal-code"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Country:
                      <input
                        type="text"
                        name="country"
                        value={country}
                        placeholder="Enter Country"
                        data-test-id="checkout-country"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                <h2 className="text-xl font-semibold">Payment Information</h2>

                <div>
                  <label>
                    Credit Card:
                    <input
                      type="text"
                      name="creditCard"
                      value={creditCard}
                      placeholder="Enter Credit Card"
                      data-test-id="checkout-credit-card"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-8">
                  <div>
                    <label>
                      Expiration Date:
                      <input
                        type="text"
                        name="expirationDate"
                        value={expirationDate}
                        placeholder="Enter Expiration Date"
                        data-test-id="checkout-expiration-date"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Security Code:
                      <input
                        type="text"
                        name="securityCode"
                        value={securityCode}
                        placeholder="Enter Security Code"
                        data-test-id="checkout-security-code"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                {error && <p className="text-red-500">{error}</p>}

                <div className="flex justify-center space-x-4 pt-5 pb-4">
                  <button
                    type="submit"
                    data-test-id="checkout-confirm-order"
                    className="bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300"
                  >
                    Confirm Order
                  </button>

                  <Link href="/">
                    <span className="inline-block bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300">
                      Continue Shopping
                    </span>
                  </Link>
                </div>
              </form>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;

----------------------------------------

// src/app/cart/page.tsx:

'use client'; // Component only runs on the client (browser).

import { useCart } from '../../context/CartContext';
import Link from 'next/link';
import Header from '../../components/Header';
import { Metadata } from 'next';
import React from 'react';

interface Product {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

// export const metadata: Metadata = {
//   title: 'Cart',
//   description: 'Cart page showing products ready to be checked out.',
// };

const CartPage: React.FC = () => {
  const { cart, removeFromCart } = useCart(); // Import the methods and data from the context of the cart.

  // Calculate total price
  const totalPrice = cart.reduce(
    (total: number, product: Product) =>
      total + product.price * product.quantity,
    0,
  );

  return (
    <div>
      <div className="container mx-auto p-6">
        <Header />
        <div className="cart bg-yellow-50 bg-opacity-75 rounded-lg shadow-md p-8">
          {cart.length === 0 ? (
            <p className="text-center text-gray-600">
              No products in the cart.
            </p>
          ) : (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
              {cart.map((product: Product) => (
                <div
                  className="cart-product bg-red-50 rounded-lg p-4 flex flex-col shadow-md"
                  key={product.id}
                  data-test-id={`cart-product-${product.id}`}
                >
                  <div className="flex-grow">
                    <h2 className="text-lg font-medium text-gray-700">
                      {product.name}
                    </h2>
                    <p
                      className="text-gray-500"
                      data-test-id={`cart-product-quantity-${product.id}`}
                    >
                      Quantity: {product.quantity}
                    </p>
                  </div>
                  <div className="flex-shrink mt-auto">
                    <p className="text-gray-500">
                      Subtotal: {(product.price * product.quantity).toFixed(2)}
                    </p>
                    <button
                      className="text-red-500 hover:underline mt-2"
                      onClick={() => removeFromCart(product.id)}
                      data-test-id={`cart-product-remove-${product.id}`}
                    >
                      Remove
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
          {cart.length > 0 && (
            <div className="mt-6">
              <p className="text-gray-600" data-test-id="cart-total">
                Total: {totalPrice.toFixed(2)}
              </p>
              <Link href="/checkout">
                <button
                  className="btn-turqoise mt-4 rounded"
                  data-test-id="cart-checkout"
                >
                  Checkout
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CartPage;

----------------------------------------

// src/app/page.tsx:

import Link from 'next/link';
import Header from '../components/Header';
import ShaderImage1 from '../components/ShaderImage1';
import ShaderImage2 from '../components/ShaderImage2';
import ShaderImage3 from '../components/ShaderImage3';
import ShaderImage4 from '../components/ShaderImage4';
import { getProducts } from '../databases/products';
import { Product } from '../types/Product';
import React from 'react';
import Image from 'next/image';

export default async function ProductsPage() {
  const products: Product[] = await getProducts();

  return (
    <div>
      <div className="container mx-auto p-6">
        <Header />
        <div className="product-list">
          {products.map((product) => {
            console.log(product.shaderPath); // Agrega esta línea para verificar el valor de shaderPath
            return (
              <Link
                href={`/products/${product.id}`}
                key={product.id}
                data-test-id={`product-${product.id}`}
              >
                <div className="product-card">
                  {product.shaderPath && (
                    <div className="rounded-lg overflow-hidden">
                      {product.shaderPath === 'ShaderImage1' && (
                        <ShaderImage1 width={300} height={300} />
                      )}
                      {product.shaderPath === 'ShaderImage2' && (
                        <ShaderImage2 width={300} height={300} />
                      )}
                      {product.shaderPath === 'ShaderImage3' && (
                        <ShaderImage3 width={300} height={300} />
                      )}
                      {product.shaderPath === 'ShaderImage4' && (
                        <ShaderImage4 width={300} height={300} />
                      )}
                    </div>
                  )}
                  {/* {!product.shaderPath && (
                    <Image
                      src={`/images/product${product.id}.jpg`}
                      alt={product.name}
                      width={300}
                      height={300}
                      className="rounded-lg mb-4"
                    />
                  )} */}
                  <h2>{product.name}</h2>
                </div>
              </Link>
            );
          })}
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gradient-to-b from-rose-100 to-amber-100;
}

.product-list {
  @apply grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6;
}

.product-card {
  @apply bg-yellow-50 bg-opacity-60 shadow-md rounded-lg overflow-hidden transition-transform transform hover:scale-105;
}

.product-card h2 {
  @apply text-lg font-semibold p-4;
}

@font-face {
  font-family: Pilowlava;
  src: url('/Pilowlava-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

.text-4xl {
  font-family: Pilowlava, sans-serif;
}

.bg-dark {
  background-color: #333;
  padding: 10px 20px;
}

.btn-burungdy {
  @apply bg-pink-700 text-yellow-50 px-6 py-3 rounded-lg hover:bg-pink-800 transition duration-300;
}

.btn-turqoise {
  @apply bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300;
}

.input-field {
  @apply bg-white border border-gray-300 rounded-lg p-2 w-full;
}

.product-card canvas {
  width: 100%;
  height: 300px;
}

.rounded-canvas {
  border-radius: 15px;
}

/* globals.css o Footer.css */
footer {
  /* background-color: #333; */
  color: #333;
  text-align: center;
  padding: 1rem 0;
}

----------------------------------------

// src/components/ShaderImage3.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = fragCoord / iResolution.xy;
  uv = uv * 2.0 - 1.0;
  uv.x *= iResolution.x / iResolution.y;

  float scale = 2.5;
  float rotationSpeed = 0.02; // Reducir la velocidad de rotación
  float zoomSpeed = 0.01;     // Reducir la velocidad de zoom

  // Aumentar y reducir la escala de los fractales con el tiempo
  float t = iTime * zoomSpeed;
  scale /= sin(0.5 * t) * 0.5 + 1.0; // Oscilar entre aumentar y disminuir

  // Rotar los fractales con el tiempo
  float angle = iTime * rotationSpeed;
  mat2 rot = mat2(cos(angle), -sin(angle), sin(angle), cos(angle));

  vec3 col = vec3(0.0);
  vec2 z = uv * scale;

  // Ajustar la animación de color
  float hue = atan(z.y, z.x) + sin(iTime * 0.1) * 10.0; // Reducir velocidad de hue
  z *= rot; // Aplicar la rotación

  vec2 c = vec2(0.355, 0.355);
  float iters = 0.0;

  for (int i = 0; i < 256; i++) {
    if (dot(z, z) > 4.0) break;
    z = vec2(z.x*z.x - z.y*z.y, 2.0*z.x*z.y) + c;
    iters += 1.0;
  }

  // Convertir iters en color RGB y suavizar los colores
  float normIters = iters / 256.0;
  col = vec3(0.5 + 0.3 * sin(6.28318 * (normIters + vec3(0.0, 0.33, 0.67) + hue)));

  // Añadir una iluminación central más suave
  float distance = length(uv);
  vec3 background = vec3(0.5 + 0.5 * sin(iTime * 0.1 + uv.xyx + vec3(0,2,4))); // Fondo cambiante más lento
  col = mix(background, col, smoothstep(1.0, 0.6, distance));

  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage3 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage3;

----------------------------------------

// src/components/ShaderImage2.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Pixel coordinates normalizadas (de 0 a 1)
  vec2 uv = fragCoord / iResolution.xy;

  // Coordenadas de centro
  vec2 center = uv - 0.5;

  // Distancia desde el centro
  float dist = length(center);

  // Efecto de onda variando con el tiempo
  float wave = sin(dist * 10.0 - iTime * 2.0) * 0.1;

  // Ajustar el color basado en el efecto de onda
  vec3 col = mix(vec3(0.6, 0.1, 0.7), vec3(1.0, 0.5, 0.8), uv.y) + wave;

  // Salida a pantalla
  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage2 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage2;

----------------------------------------

// src/components/AddToCartButton.js:

'use client';

import { useState } from 'react';
import { useCart } from '../context/CartContext';
import { TextField, Button } from '@mui/material';

export default function AddToCartButton({ product }) {
  const [quantity, setQuantity] = useState(1);
  const { addToCart } = useCart();

  const handleQuantityChange = (e) => {
    const inputValue = parseInt(e.target.value, 10) || 0; // Ensure a valid number or 0
    setQuantity(inputValue < 1 ? 1 : inputValue); // Set to 1 if less than 1
  };

  const handleAddToCart = () => {
    addToCart(product, quantity);
  };

  return (
    <div>
      <div className="flex items-center mt-5 mb-4">
        <TextField
          type="number"
          id="quantity"
          name="quantity"
          label="Quantity"
          variant="outlined"
          size="small"
          value={quantity}
          onChange={handleQuantityChange}
          inputProps={{ min: 1 }}
          data-test-id="product-quantity"
          sx={{ marginRight: '1rem', width: '100px', backgroundColor: 'white' }}
        />
      </div>
      <button
        onClick={handleAddToCart}
        className="btn-turqoise mt-5"
        data-test-id="product-add-to-cart"
      >
        Add to Cart
      </button>
      {/* <button
        onClick={handleAddToCart}
        className="btn-turqoise mt-5"
        data-test-id="update-quantity"
      >
        Update Quantity
      </button> */}
    </div>
  );
}

----------------------------------------

// src/components/Header.js:

'use client';

import Link from 'next/link';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';
import { useCart } from '../context/CartContext';
import { useEffect, useState } from 'react';

export default function Header() {
  const { cart } = useCart();
  const [cartCount, setCartCount] = useState(0);

  useEffect(() => {
    setCartCount(cart.reduce((total, product) => total + product.quantity, 0));
  }, [cart]);

  return (
    <header className="mb-8">
      <div className="flex justify-between items-center">
        <h1 className="text-4xl sm:text-3xl font-bold mb-0">
          The Digital Amulet Vault
        </h1>
        <Link href="/cart" className="ml-4" data-test-id="cart-link">
          <button className="bg-teal-500 text-yellow-50 px-6 py-3 rounded hover:bg-teal-600 flex items-center justify-center">
            <FontAwesomeIcon
              icon={faShoppingCart}
              className="text-yellow-50 text-xl"
            />
            <span className="ml-2 text-sm" data-test-id="cart-count">
              {cartCount}
            </span>
          </button>
        </Link>
      </div>
      <div className="bg-dark py-2 text-white rounded-lg mt-4">
        <Link
          href="/"
          className="ml-3 text-yellow-500 hover:text-yellow-50 no-underline"
          data-test-id="products-link"
        >
          <span>Products</span>
        </Link>
      </div>
    </header>
  );
}

----------------------------------------

// src/components/ShaderImage1.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  vec2 uv = fragCoord / iResolution.xy;
  vec3 col = 0.5 + 0.5 * cos(iTime + uv.xyx + vec3(0, 2, 4));
  fragColor = vec4(col, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage1 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return <canvas ref={canvasRef} width={width} height={height} />;
};

export default ShaderImage1;

----------------------------------------

// src/components/ShaderImage4.js:

'use client';

import { useRef, useEffect } from 'react';

const vertexShaderSource = `
attribute vec4 aPosition;
void main() {
  gl_Position = aPosition;
}
`;

const fragmentShaderSource = `
precision mediump float;
uniform vec2 iResolution;
uniform float iTime;

// ShaderToy GLSL code

// Function to generate 2D noise - can be used for movement
float noise(vec2 p) {
  return fract(sin(dot(p ,vec2(127.1,311.7))) * 43758.5453123);
}

// Interpolated noise function for smooth transitions
float smoothNoise(vec2 p) {
  vec2 inter = fract(p);
  p = floor(p);
  float a = noise(p);
  float b = noise(p + vec2(1.0, 0.0));
  float c = noise(p + vec2(0.0, 1.0));
  float d = noise(p + vec2(1.0, 1.0));
  float u = inter.x * inter.x * (3.0 - 2.0 * inter.x);
  float v = inter.y * inter.y * (3.0 - 2.0 * inter.y);
  return mix(a, b, u) + (c - a) * v * (1.0 - u) + (d - b) * u * v;
}

// 3D Perlin noise function for dynamic movements inside the sphere
float perlinNoise(vec3 p) {
  float total = 0.0;
  float frequency = 1.0;
  float amplitude = 1.0;
  for (int i = 0; i < 4; i++) {
    total += smoothNoise(p.xy * frequency) * amplitude;
    frequency *= 2.0;
    amplitude /= 2.0;
  }
  return total;
}

void mainImage(out vec4 fragColor, in vec2 fragCoord) {
  // Normalized coordinates [0,1]
  vec2 uv = fragCoord / iResolution.xy;
  uv = uv * 2.0 - 1.0;
  uv.x *= iResolution.x / iResolution.y;

  // Settings for Sphere
  vec3 camPos = vec3(0.0, 0.0, -5.0);
  vec3 ro = camPos;
  vec3 rd = normalize(vec3(uv, 1.0));

  float time = iTime * 0.5;
  vec3 spherePos = vec3(sin(time) * 1.0, sin(time * 0.7) * 1.0, 5.0);
  float sphereRadius = 5.0; // Considerable larger sphere

  // Sphere Rendering
  float A = dot(rd, rd);
  float B = 2.0 * dot(rd, ro - spherePos);
  float C = dot(ro - spherePos, ro - spherePos) - sphereRadius * sphereRadius;

  float D = B * B - 4.0 * A * C;

  if (D < 0.0) {
    // No hit, pastel pink background
    fragColor = vec4(1.0, 0.9, 0.9, 1.0);
    return;
  }

  // Calculate intersection distance
  float t = (-B - sqrt(D)) / (2.0 * A);

  // Intersection point and normal
  vec3 intersectPos = ro + t * rd;
  vec3 normal = normalize(intersectPos - spherePos);

  // Light Direction
  vec3 lightDir = normalize(vec3(-0.5, 1.0, -1.0));

  // Basic Diffuse Lighting
  float diffuse = max(dot(normal, lightDir), 0.0);

  // Add dynamic Perlin noise for internal organic movement
  float noiseValue = perlinNoise(intersectPos + vec3(0.0, 0.0, iTime * 0.5));

  // Combine colors and lighting
  vec3 color = vec3(0.3, 0.6, 0.9) * diffuse;
  color += vec3(0.1, 0.1, 0.5) * noiseValue;

  fragColor = vec4(color, 1.0);
}

void main() {
  mainImage(gl_FragColor, gl_FragCoord.xy);
}
`;

function createShader(gl, type, source) {
  const shader = gl.createShader(type);
  gl.shaderSource(shader, source);
  gl.compileShader(shader);
  if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS)) {
    console.error('Error compiling shader:', gl.getShaderInfoLog(shader));
    gl.deleteShader(shader);
    return null;
  }
  return shader;
}

function createProgram(gl, vertexShader, fragmentShader) {
  const program = gl.createProgram();
  gl.attachShader(program, vertexShader);
  gl.attachShader(program, fragmentShader);
  gl.linkProgram(program);
  if (!gl.getProgramParameter(program, gl.LINK_STATUS)) {
    console.error('Error linking program:', gl.getProgramInfoLog(program));
    gl.deleteProgram(program);
    return null;
  }
  return program;
}

const ShaderImage4 = ({ width, height }) => {
  const canvasRef = useRef();

  useEffect(() => {
    const canvas = canvasRef.current;
    canvas.width = width;
    canvas.height = height;

    const gl =
      canvas.getContext('webgl') || canvas.getContext('experimental-webgl');
    if (!gl) {
      console.error('No WebGL support');
      return;
    }

    const vertexShader = createShader(gl, gl.VERTEX_SHADER, vertexShaderSource);
    const fragmentShader = createShader(
      gl,
      gl.FRAGMENT_SHADER,
      fragmentShaderSource,
    );
    const program = createProgram(gl, vertexShader, fragmentShader);

    if (!program) {
      console.error('Failed to create program');
      return;
    }

    const positionLocation = gl.getAttribLocation(program, 'aPosition');
    const resolutionUniformLocation = gl.getUniformLocation(
      program,
      'iResolution',
    );
    const timeUniformLocation = gl.getUniformLocation(program, 'iTime');

    const positionBuffer = gl.createBuffer();
    gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
    const positions = [
      -1.0, -1.0, 1.0, -1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, 1.0, 1.0,
    ];
    gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(positions), gl.STATIC_DRAW);

    function render(time) {
      gl.viewport(0, 0, gl.canvas.width, gl.canvas.height);

      gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
      gl.useProgram(program);

      gl.enableVertexAttribArray(positionLocation);
      gl.bindBuffer(gl.ARRAY_BUFFER, positionBuffer);
      gl.vertexAttribPointer(positionLocation, 2, gl.FLOAT, false, 0, 0);

      gl.uniform2f(
        resolutionUniformLocation,
        gl.canvas.width,
        gl.canvas.height,
      );
      gl.uniform1f(timeUniformLocation, time * 0.001);

      gl.drawArrays(gl.TRIANGLES, 0, 6);

      requestAnimationFrame(render);
    }
    requestAnimationFrame(render);
  }, [width, height]);

  return (
    <canvas
      ref={canvasRef}
      width={width}
      height={height}
      className="rounded-lg"
    />
  );
};

export default ShaderImage4;

----------------------------------------

// src/components/Footer.js:

// src/components/Footer.js
import React from 'react';

const Footer = () => {
  return (
    <footer className="bg-dark text-yellow-50 p-4 text-center">
      <p>© Alex Arroyo 2024</p>
    </footer>
  );
};

export default Footer;

----------------------------------------

// src/context/CartContext.js:

'use client';

import { createContext, useContext, useEffect, useState } from 'react';
import {
  getCartFromCookies as getClientCartFromCookies,
  saveCartToCookies,
  removeCartFromCookies,
} from '../utils/cookies';

const CartContext = createContext();

export function CartProvider({ children }) {
  const [cart, setCart] = useState(() => {
    return getClientCartFromCookies();
  });

  useEffect(() => {
    if (typeof window !== 'undefined') {
      saveCartToCookies(cart);
    }
  }, [cart]);

  const addToCart = (product, quantity) => {
    setCart((prevCart) => {
      const existingProduct = prevCart.find((item) => item.id === product.id);
      if (existingProduct) {
        return prevCart.map((item) =>
          item.id === product.id
            ? { ...item, quantity: item.quantity + quantity }
            : item,
        );
      }
      return [...prevCart, { ...product, quantity }];
    });
  };

  const removeFromCart = (productId) => {
    setCart((prevCart) => {
      const newCart = prevCart.filter((item) => item.id !== productId);
      if (newCart.length === 0) {
        removeCartFromCookies();
      }
      return newCart;
    });
  };

  return (
    <CartContext.Provider value={{ cart, setCart, addToCart, removeFromCart }}>
      {children}
    </CartContext.Provider>
  );
}

export const useCart = () => useContext(CartContext);

----------------------------------------

// src/databases/products.ts:

// src/databases/products.ts

import { sql } from '../utils/connect';
import { Product } from '../types/Product';

export async function getProducts(): Promise<Product[]> {
  try {
    const products = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products
    `;
    return products;
  } catch (error) {
    console.error('Error fetching products from database:', error);
    return [];
  }
}

export async function getProductById(id: number): Promise<Product | null> {
  try {
    const [product] = await sql<Product[]>`
      SELECT id, name, type, description, price, shader_path AS "shaderPath" FROM products WHERE id = ${id}
    `;
    return product || null;
  } catch (error) {
    console.error('Error fetching product by ID from database:', error);
    return null;
  }
}

----------------------------------------

// src/fontawesome.ts:

import { library } from '@fortawesome/fontawesome-svg-core';
import { faShoppingCart } from '@fortawesome/free-solid-svg-icons';

library.add(faShoppingCart);

----------------------------------------

// src/types/Product.ts:

export interface Product {
  id: number;
  name: string;
  type: string;
  description: string;
  image: string;
  price: number;
  shaderPath: string | null;
}

----------------------------------------

// src/types/Params.ts:

export interface Params {
  id: string;
}

----------------------------------------

// src/utils/cookies.js:

import secureJsonParse from 'secure-json-parse';

export const getCartFromCookies = () => {
  if (typeof document !== 'undefined') {
    const name = 'cart=';
    const decodedCookie = decodeURIComponent(document.cookie);
    const ca = decodedCookie.split(';');
    for (let i = 0; i < ca.length; i++) {
      let c = ca[i];
      while (c.charAt(0) === ' ') {
        c = c.substring(1);
      }
      if (c.indexOf(name) === 0) {
        return secureJsonParse(c.substring(name.length, c.length));
      }
    }
  }
  return [];
};

export const saveCartToCookies = (cart) => {
  if (typeof document !== 'undefined') {
    const expires = new Date();
    expires.setTime(expires.getTime() + 24 * 60 * 60 * 1000); // 1 day
    document.cookie = `cart=${JSON.stringify(cart)};expires=${expires.toUTCString()};path=/`;
  }
};

export const removeCartFromCookies = () => {
  if (typeof document !== 'undefined') {
    document.cookie = 'cart=; Max-Age=0; path=/';
  }
};

----------------------------------------

// src/utils/__tests__/cartSum.test.ts:

const calculateCartTotal = (cart: { price: number; quantity: number }[]) => {
  return cart.reduce(
    (total, product) => total + product.price * product.quantity,
    0,
  );
};

test('calculates the total price of the cart', () => {
  const cart = [
    { id: 1, price: 10, quantity: 2 },
    { id: 2, price: 20, quantity: 1 },
  ];
  const total = calculateCartTotal(cart);
  expect(total).toBe(40);
});

----------------------------------------

// src/utils/__tests__/combineProdutData.test.ts:

import { getProducts } from '../../databases/products';
import { getCartFromCookies } from '../cookies';
import { Product } from '../../types/Product';

jest.mock('../../databases/products', () => ({
  getProducts: jest.fn(),
}));

jest.mock('../cookies', () => ({
  getCartFromCookies: jest.fn(),
}));

const combineProductData = async () => {
  const products: Product[] = await getProducts();
  const cart = getCartFromCookies();

  return cart.map((cartItem: { id: number; quantity: number }) => {
    const product = products.find((product) => product.id === cartItem.id);
    return {
      ...product,
      quantity: cartItem.quantity,
    };
  });
};

test('combines product data with quantity data', async () => {
  const mockProducts = [
    {
      id: 1,
      name: 'Product 1',
      type: 'Type 1',
      description: 'Description 1',
      price: 10,
      shaderPath: null,
    },
    {
      id: 2,
      name: 'Product 2',
      type: 'Type 2',
      description: 'Description 2',
      price: 20,
      shaderPath: null,
    },
  ];

  const mockCart = [
    { id: 1, quantity: 2 },
    { id: 2, quantity: 3 },
  ];

  (getProducts as jest.Mock).mockResolvedValue(mockProducts);
  (getCartFromCookies as jest.Mock).mockReturnValue(mockCart);

  const combinedData = await combineProductData();

  expect(combinedData).toBeDefined();
  expect(combinedData[0]).toHaveProperty('id');
  expect(combinedData[0]).toHaveProperty('quantity');
  expect(combinedData[0].quantity).toBe(2);
});

----------------------------------------

// src/utils/__tests__/updateCartItemQuantity.test.ts:

import { getCartFromCookies, saveCartToCookies } from '../cookies';

const updateCartItemQuantity = (id: number, quantity: number) => {
  const cart = getCartFromCookies();
  const updatedCart = cart.map((item: { id: number; quantity: number }) =>
    item.id === id ? { ...item, quantity } : item,
  );
  saveCartToCookies(updatedCart);
};

test('updates the quantity of an existing cart item', () => {
  // Mock initial cart data
  const initialCart = [{ id: 1, quantity: 1 }];
  document.cookie = `cart=${JSON.stringify(initialCart)}`;

  updateCartItemQuantity(1, 3);

  const updatedCart = getCartFromCookies();
  expect(updatedCart[0].quantity).toBe(3);
});

----------------------------------------

// src/utils/connect.ts:

import 'server-only';
import postgres from 'postgres';
import { config } from 'dotenv';

config();

export const sql = postgres({
  ssl: Boolean(process.env.POSTGRES_URL),
  transform: {
    ...postgres.camel,
    undefined: null,
  },
});

----------------------------------------

// src/utils/config.mjs:

// src/utils/config.mjs
import { config } from 'dotenv-safe';
import postgres from 'postgres';

export const postgresConfig = {
  ssl: Boolean(process.env.POSTGRES_URL),
  transform: {
    ...postgres.camel,
    undefined: null,
  },
};

export function setEnvironmentVariables() {
  if (process.env.NODE_ENV === 'production' || process.env.CI) {
    if (process.env.POSTGRES_URL) {
      process.env.PGHOST = process.env.POSTGRES_HOST;
      process.env.PGDATABASE = process.env.POSTGRES_DATABASE;
      process.env.PGUSERNAME = process.env.POSTGRES_USER;
      process.env.PGPASSWORD = process.env.POSTGRES_PASSWORD;
    }
    return;
  }

  // Avoid connecting to the database during the build
  if (!process.env.BUILD_ENV) {
    config();
  }
}

----------------------------------------

// src/utils/serverCookies.js:

// src/utils/serverCookies.js
import { cookies } from 'next/headers';

export const getCartFromCookies = () => {
  const cookieStore = cookies();
  const cartCookie = cookieStore.get('cart');
  if (cartCookie) {
    return JSON.parse(cartCookie.value);
  }
  return [];
};

----------------------------------------

// .dockerignore:

# Secrets
*.env
.env.test
.env*.local
.env.development

# Scripts
*.sql

# Documentation
README.md

# Next.js build artifacts
build
.vercel
.next

# Tests
playwright
playwright.config.ts
coverage
*/__tests__
jest.config.js

# Dependencies
node_modules

# Git and GitHub
.git
.github

# Linting, formatting config
.eslintcache
.eslintignore
.eslintrc
prettier.config.cjs

# Docker
Dockerfile
.dockerignore

# TypeScript cache
.tsbuildinfo

----------------------------------------

// .env:

PGHOST=localhost
PGPORT=5432
PGDATABASE=nextjs_ecommerce_store
PGUSERNAME=nextjs_ecommerce_store
PGPASSWORD=nextjs_ecommerce_store

----------------------------------------

// .env.example:

PGHOST=
PGPORT=
PGDATABASE=
PGUSERNAME=
PGPASSWORD=

----------------------------------------

// Dockerfile:

# Dockerfile

FROM node:lts-alpine AS builder

# Install necessary tools
RUN apk add --no-cache libc6-compat yq --repository=https://dl-cdn.alpinelinux.org/alpine/edge/community

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy the project content
COPY . .

# Combine dependencies
RUN yq --inplace --output-format=json '(.dependencies = .dependencies * (.devDependencies | to_entries | map(select(.key | test("^(autoprefixer|daisyui|tailwindcss|typescript|@types/*|eslint-config-upleveled)$"))) | from_entries)) | (.devDependencies = {})' package.json

# Set specific environment variables for the build
ENV BUILD_ENV=true

# Install dependencies and build the application
RUN pnpm install
RUN pnpm build

# Execution stage
FROM node:lts-alpine AS runner

ENV NODE_ENV production

# Install necessary tools
RUN apk add bash postgresql
RUN corepack enable && corepack prepare pnpm@latest --activate

WORKDIR /app

# Copy the built application
COPY --from=builder /app/.next ./.next

# Copy only files necessary to run the application
COPY --from=builder /app/node_modules ./node_modules
COPY --from=builder /app/migrations ./migrations
COPY --from=builder /app/public ./public
COPY --from=builder /app/package.json ./
COPY --from=builder /app/next.config.mjs ./

# Copy startup scripts and make them executable
COPY --from=builder /app/scripts ./scripts
RUN chmod +x /app/scripts/fly-io-start.sh

CMD ["./scripts/fly-io-start.sh"]

----------------------------------------

// fly.toml:

app = "digital-amulet-vault"
primary_region = "otp"

[mounts]
  source = "postgres"
  destination = "/postgres-volume"

[env]
  PORT = "8080"

[http_service]
  internal_port = 8080
  force_https = true
  auto_stop_machines = true
  auto_start_machines = true

----------------------------------------

// ley.config.mjs:

// ley.config.mjs
import {
  postgresConfig,
  setEnvironmentVariables,
} from './src/utils/config.mjs';

setEnvironmentVariables();

export default {
  ...postgresConfig,
};

----------------------------------------

// next-env.d.ts:

/// <reference types="next" />
/// <reference types="next/image-types/global" />
/// <reference types="next/navigation-types/compat/navigation" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/basic-features/typescript for more information.

----------------------------------------

// next.config.mjs:

/** @type {import('next').NextConfig} */
const nextConfig = {
  experimental: {
    typedRoutes: true,
  },
  eslint: {
    ignoreDuringBuilds: true,
  },
  typescript: {
    ignoreBuildErrors: true,
  },
};

export default nextConfig;

----------------------------------------

// package.json:

{
  "name": "nextjs-ecommerce-store",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint",
    "migrate": "ley --require tsx/cjs",
    "test": "pnpm run test:jest && pnpm run test:playwright",
    "test:jest": "jest --config jest.config.js",
    "test:playwright": "pnpm exec playwright test",
    "lint:styles": "stylelint '**/*.{css,scss,less}'"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@fortawesome/fontawesome-free": "^6.5.2",
    "@fortawesome/fontawesome-svg-core": "^6.5.2",
    "@fortawesome/free-brands-svg-icons": "^6.5.2",
    "@fortawesome/free-solid-svg-icons": "^6.5.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@mui/material": "^5.15.20",
    "@upleveled/ley": "^0.8.6",
    "body-parser": "^1.20.2",
    "cookie-signature": "^1.2.1",
    "crypto-js": "^4.2.0",
    "dotenv": "^16.4.5",
    "dotenv-safe": "^9.1.0",
    "express": "^4.19.2",
    "js-cookie": "^3.0.5",
    "mini-css-extract-plugin": "^2.9.0",
    "mongose": "0.0.2-security",
    "next": "14.2.4",
    "pg": "^8.12.0",
    "playwright": "^1.44.1",
    "postgres": "^3.4.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "secure-json-parse": "^2.7.0",
    "three": "^0.165.0",
    "ts-node": "^10.9.2",
    "tsx": "^4.15.7",
    "webpack": "^5.92.1"
  },
  "devDependencies": {
    "@playwright/test": "^1.44.1",
    "@testing-library/jest-dom": "^6.4.6",
    "@testing-library/react": "^16.0.0",
    "@types/babel__core": "^7.20.5",
    "@types/dotenv-safe": "^8.1.6",
    "@types/jest": "^29.5.12",
    "@types/next": "^9.0.0",
    "@types/node": "^20.14.8",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "babel-jest": "^29.7.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.3",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "postcss": "^8.4.38",
    "stylelint": "^16.6.1",
    "stylelint-config-standard": "^36.0.1",
    "tailwindcss": "^3.4.4",
    "ts-jest": "^29.1.5",
    "typescript": "^5.5.2"
  }
}

----------------------------------------

// tailwind.config.js:

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./src/pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/components/**/*.{js,ts,jsx,tsx,mdx}",
    "./src/app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      backgroundImage: {
        "gradient-radial": "radial-gradient(var(--tw-gradient-stops))",
        "gradient-conic":
          "conic-gradient(from 180deg at 50% 50%, var(--tw-gradient-stops))",
      },
    },
  },
  plugins: [],
};

----------------------------------------

// tsconfig.json:

{
  "compilerOptions": {
    "target": "esnext",
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "paths": {
      "@/*": [
        "./src/*"
      ]
    },
    "plugins": [
      {
        "name": "next"
      }
    ]
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

