// src/app/cart/page.tsx:

'use client'; // Component only runs on the client (browser).

import { useCart } from '../../context/CartContext';
import Link from 'next/link';
import Header from '../../components/Header';
import { Metadata } from 'next';
import React from 'react';

interface Product {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

// export const metadata: Metadata = {
//   title: 'Cart',
//   description: 'Cart page showing products ready to be checked out.',
// };

const CartPage: React.FC = () => {
  const { cart, removeFromCart } = useCart(); // Import the methods and data from the context of the cart.

  // Calculate total price
  const totalPrice = cart.reduce(
    (total: number, product: Product) =>
      total + product.price * product.quantity,
    0,
  );

  return (
    <div>
      <div className="container mx-auto p-6 pt-0">
        {/* <Header /> */}
        <div className="cart bg-yellow-50 bg-opacity-75 rounded-lg shadow-md p-8">
          {cart.length === 0 ? (
            <p className="text-center text-gray-600">
              No products in the cart.
            </p>
          ) : (
            <div className="grid grid-cols-1 gap-6 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4">
              {cart.map((product: Product) => (
                <div
                  className="cart-product bg-red-50 rounded-lg p-4 flex flex-col shadow-md"
                  key={product.id}
                  data-test-id={`cart-product-${product.id}`}
                >
                  <div className="flex-grow">
                    <h2 className="text-lg font-medium text-gray-700">
                      {product.name}
                    </h2>
                    <p
                      className="text-gray-500"
                      data-test-id={`cart-product-quantity-${product.id}`}
                    >
                      Quantity: {product.quantity}
                    </p>
                  </div>
                  <div className="flex-shrink mt-auto">
                    <p className="text-gray-500">
                      Subtotal: {(product.price * product.quantity).toFixed(2)}
                    </p>
                    <button
                      className="text-red-500 hover:underline mt-2"
                      onClick={() => removeFromCart(product.id)}
                      data-test-id={`cart-product-remove-${product.id}`}
                    >
                      Remove
                    </button>
                  </div>
                </div>
              ))}
            </div>
          )}
          {cart.length > 0 && (
            <div className="mt-6">
              <p className="text-gray-600" data-test-id="cart-total">
                Total: {totalPrice.toFixed(2)}
              </p>
              <Link href="/checkout">
                <button
                  className="btn-turqoise mt-4 rounded"
                  data-test-id="cart-checkout"
                >
                  Checkout
                </button>
              </Link>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default CartPage;

----------------------------------------

// src/app/checkout/page.tsx:

'use client';

import Link from 'next/link';
import { Metadata } from 'next';
import Header from '../../components/Header';
import { useState, ChangeEvent, FormEvent } from 'react';
import { useRouter } from 'next/navigation';
import { useCart } from '../../context/CartContext';
import { removeCartFromCookies } from '../../utils/cookies';

// export const metadata: Metadata = {
//   title: 'Checkout Page',
//   description: 'Checkout page showing products set to be purchased.',
// };

// Define types for form data and cart item
interface FormData {
  firstName: string;
  lastName: string;
  email: string;
  address: string;
  city: string;
  postalCode: string;
  country: string;
  creditCard: string;
  expirationDate: string;
  securityCode: string;
}

interface CartItem {
  id: string;
  name: string;
  price: number;
  quantity: number;
}

const CheckoutPage: React.FC = () => {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    email: '',
    address: '',
    city: '',
    postalCode: '',
    country: '',
    creditCard: '',
    expirationDate: '',
    securityCode: '',
  });
  const [error, setError] = useState<string>('');

  const { cart, setCart } = useCart();
  const router = useRouter();

  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {
    const { name, value } = event.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = (event: FormEvent<HTMLFormElement>) => {
    event.preventDefault();

    // Form validation
    for (let key in formData) {
      if (formData[key as keyof typeof formData] === '') {
        setError('All fields are required');
        return;
      }
    }

    // Clear the cart cookies and context
    removeCartFromCookies();
    setCart([]); // Clear the cart context

    // Redirect to the thank you page
    router.push('/thankyou');
  };

  const {
    firstName,
    lastName,
    email,
    address,
    city,
    postalCode,
    country,
    creditCard,
    expirationDate,
    securityCode,
  } = formData;

  const totalPrice = cart
    .reduce(
      (total: number, product: CartItem) =>
        total + product.price * product.quantity,
      0,
    )
    .toFixed(2);

  return (
    <div>
      <div className="min-h-screen py-6 sm:py-12 pt-0">
        <div className="max-w-screen-xl mx-auto px-4 sm:px-6 lg:px-8 pt-0">
          {/* <Header /> */}
        </div>
        <div className="flex items-start justify-center mt-0 sm:mt-2">
          <main className="mt-8 w-full max-w-lg bg-yellow-50 bg-opacity-60 rounded-lg shadow-md">
            <div className="p-4 sm:p-6 lg:p-8">
              <p className="text-lg text-gray-600 mb-6">Total: {totalPrice}</p>
              <hr className="my-4" /> {/* Separator line */}
              <form onSubmit={handleSubmit} className="space-y-4">
                <h2 className="text-xl font-semibold">Shipping Address</h2>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label>
                      First Name:
                      <input
                        type="text"
                        name="firstName"
                        value={firstName}
                        placeholder="Enter First Name"
                        data-test-id="checkout-first-name"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Last Name:
                      <input
                        type="text"
                        name="lastName"
                        value={lastName}
                        placeholder="Enter Last Name"
                        data-test-id="checkout-last-name"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                <div>
                  <label>
                    Email:
                    <input
                      type="email"
                      name="email"
                      value={email}
                      placeholder="Enter Email"
                      data-test-id="checkout-email"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div>
                  <label>
                    Address:
                    <input
                      type="text"
                      name="address"
                      value={address}
                      placeholder="Enter Address"
                      data-test-id="checkout-address"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div>
                  <label>
                    City:
                    <input
                      type="text"
                      name="city"
                      value={city}
                      placeholder="Enter City"
                      data-test-id="checkout-city"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label>
                      Postal Code:
                      <input
                        type="text"
                        name="postalCode"
                        value={postalCode}
                        placeholder="Enter Postal Code"
                        data-test-id="checkout-postal-code"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Country:
                      <input
                        type="text"
                        name="country"
                        value={country}
                        placeholder="Enter Country"
                        data-test-id="checkout-country"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                <h2 className="text-xl font-semibold">Payment Information</h2>

                <div>
                  <label>
                    Credit Card:
                    <input
                      type="text"
                      name="creditCard"
                      value={creditCard}
                      placeholder="Enter Credit Card"
                      data-test-id="checkout-credit-card"
                      onChange={handleChange}
                      className="input-field"
                    />
                  </label>
                </div>

                <div className="grid grid-cols-2 gap-4 mb-8">
                  <div>
                    <label>
                      Expiration Date:
                      <input
                        type="text"
                        name="expirationDate"
                        value={expirationDate}
                        placeholder="Enter Expiration Date"
                        data-test-id="checkout-expiration-date"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>

                  <div>
                    <label>
                      Security Code:
                      <input
                        type="text"
                        name="securityCode"
                        value={securityCode}
                        placeholder="Enter Security Code"
                        data-test-id="checkout-security-code"
                        onChange={handleChange}
                        className="input-field"
                      />
                    </label>
                  </div>
                </div>

                {error && <p className="text-red-500">{error}</p>}

                <div className="flex justify-center space-x-4 pt-5 pb-4">
                  <button
                    type="submit"
                    data-test-id="checkout-confirm-order"
                    className="bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300"
                  >
                    Confirm Order
                  </button>

                  <Link href="/">
                    <span className="inline-block bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300">
                      Continue Shopping
                    </span>
                  </Link>
                </div>
              </form>
            </div>
          </main>
        </div>
      </div>
    </div>
  );
};

export default CheckoutPage;

----------------------------------------

// src/app/globals.css:

@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-gradient-to-b from-rose-100 to-amber-100;
}

.product-list {
  @apply grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6;
}

.product-card {
  @apply bg-yellow-50 bg-opacity-60 shadow-md rounded-lg overflow-hidden transition-transform transform hover:scale-105;
}

.product-card h2 {
  @apply text-lg font-semibold p-4;
}

@font-face {
  font-family: Pilowlava;
  src: url('/Pilowlava-Regular.woff2') format('woff2');
  font-weight: normal;
  font-style: normal;
  font-display: swap;
}

.text-4xl {
  font-family: Pilowlava, sans-serif;
}

.bg-dark {
  background-color: #333;
  padding: 10px 20px;
}

.btn-burungdy {
  @apply bg-pink-700 text-yellow-50 px-6 py-3 rounded-lg hover:bg-pink-800 transition duration-300;
}

.btn-turqoise {
  @apply bg-teal-500 text-yellow-50 px-6 py-3 rounded-lg hover:bg-teal-600 transition duration-300;
}

.input-field {
  @apply bg-white border border-gray-300 rounded-lg p-2 w-full;
}

.product-card canvas {
  width: 100%;
  height: 300px;
}

.rounded-canvas {
  border-radius: 15px;
}

/* globals.css o Footer.css */
footer {
  /* background-color: #333; */
  color: #333;
  text-align: center;
  padding: 1rem 0;
}

----------------------------------------

// src/app/layout.js:

import { Inter } from 'next/font/google';
import './globals.css';
import { library } from '@fortawesome/fontawesome-svg-core';
import { fas } from '@fortawesome/free-solid-svg-icons';
import { fab } from '@fortawesome/free-brands-svg-icons';
import { CartProvider } from '../context/CartContext';
import Footer from '../components/Footer';
import Header from '../components/Header';

library.add(fas, fab);

const inter = Inter({ subsets: ['latin'] });

export const metadata = {
  title: 'Digital Amulet Vault',
  description: 'Get the charms from the interwebs',
};

export default function RootLayout({ children }) {
  return (
    <html lang="en">
      <body
        className={`${inter.className} min-w-screen min-h-screen flex flex-col`}
      >
        <CartProvider>
          <div className="container mx-auto p-6 pb-0">
            <Header />
          </div>
          <div className="flex-grow">{children}</div>
          <Footer />
        </CartProvider>
      </body>
    </html>
  );
}

----------------------------------------

// src/app/page.tsx:

'use client';

import { useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function HomePage() {
  const router = useRouter();

  useEffect(() => {
    router.push('/productspage');
  }, [router]);

  return null;
}

----------------------------------------

// src/app/product/[id]/page.tsx:

// src/app/products/[id]/page.js

import Link from 'next/link';
// import Head from 'next/head';
import { Metadata } from 'next';
import Header from '../../../components/Header';
import AddToCartButton from '../../../components/AddToCartButton';
import ShaderImage1 from '../../../components/ShaderImage1';
import ShaderImage2 from '../../../components/ShaderImage2';
import ShaderImage3 from '../../../components/ShaderImage3';
import ShaderImage4 from '../../../components/ShaderImage4';
import { getProductById, getProducts } from '../../../databases/products';
import { Product } from '../../../types/Product';
import { Params } from '../../../types/Params';
import React from 'react';
import Image from 'next/image';

// const mockProducts = [
//   {
//     id: 1,
//     name: 'Smooth Amulet',
//     description: 'Description for Product 1',
//     image: '/images/product1.jpg',
//     price: 10.99,
//   },
//   {
//     id: 2,
//     name: 'Deep Amulet',
//     description: 'Description for Product 2',
//     image: '/images/product2.jpg',
//     price: 20.99,
//   },
//   {
//     id: 3,
//     name: 'Fractal Amulet',
//     description: 'Description for Product 3',
//     image: '/images/product3.jpg',
//     price: 30.99,
//   },
//   {
//     id: 4,
//     name: 'Spherical Amulet',
//     description: 'Description for Product 4',
//     image: '/images/product4.jpg',
//     price: 40.99,
//   },
// ];

// export const metadata: Metadata = {
//   title: 'Product Info',
//   description: 'Overview of all available amulets.',
// };

export async function generateStaticParams() {
  const products: Product[] = await getProducts();
  return products.map((product) => ({
    id: product.id.toString(),
  }));
}

export default async function ProductPage({ params }: { params: Params }) {
  const product: Product | null = await getProductById(Number(params.id));

  if (!product) {
    return (
      <div className="container mx-auto p-7 pt-0">
        <p>Product not found</p>
      </div>
    );
  }

  return (
    <div>
      {/* <t <Head>
        itle>Product Info</title>
        <meta name="description" content="Overview of all available amulets." />
      </Head> */}
      <div className="container mx-auto p-6 pt-0">
        {/* <Header /> */}
        <div className="rounded-lg bg-yellow-50 bg-opacity-60 overflow-hidden shadow-md p-6 flex">
          {product.shaderPath && (
            <div className="mr-8">
              {product.shaderPath === 'ShaderImage1' && (
                <ShaderImage1 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage2' && (
                <ShaderImage2 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage3' && (
                <ShaderImage3 width={300} height={300} />
              )}
              {product.shaderPath === 'ShaderImage4' && (
                <ShaderImage4 width={300} height={300} />
              )}
            </div>
          )}
          {!product.shaderPath && (
            <Image
              src={product.image} // Add the 'image' property to the 'Product' type
              alt={product.name}
              className="mr-8"
              style={{ width: '300px', height: '300px', objectFit: 'cover' }}
              data-test-id="product-image"
              // src={''}
            />
          )}
          <div>
            <h1 className="text-2xl font-bold mb-4">{product.name}</h1>
            <p
              className="text-xl font-semibold mb-4"
              data-test-id="product-price"
            >
              ${product.price}
            </p>
            <p className="mb-8">{product.description}</p>
            <AddToCartButton product={product} />
          </div>
        </div>
      </div>
    </div>
  );
}

----------------------------------------

// src/app/productspage/page.tsx:

// src/app/productspage/page.tsx

import { sql } from '../../utils/connect';
import { Product } from '../../types/Product';
import ShaderImage1 from '../../components/ShaderImage1';
import ShaderImage2 from '../../components/ShaderImage2';
import ShaderImage3 from '../../components/ShaderImage3';
import ShaderImage4 from '../../components/ShaderImage4';
import Image from 'next/image';
import Link from 'next/link';

type ProductLinkProps = {
  product: Product;
};

const ProductLink: React.FC<ProductLinkProps> = ({ product }) => {
  const href = `/product/${product.id}`;

  return (
    <Link
      href={{
        pathname: '/product/[id]',
        query: { id: product.id },
      }}
      key={product.id}
      data-test-id={`product-${product.id}`}
      className="product-card"
    >
      <div style={{ cursor: 'pointer' }}>
        {product.shaderPath && (
          <div className="rounded-lg overflow-hidden">
            {product.shaderPath === 'ShaderImage1' && (
              <ShaderImage1 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage2' && (
              <ShaderImage2 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage3' && (
              <ShaderImage3 width={300} height={300} />
            )}
            {product.shaderPath === 'ShaderImage4' && (
              <ShaderImage4 width={300} height={300} />
            )}
          </div>
        )}
        {!product.shaderPath && (
          <Image
            src={product.image}
            alt={product.name}
            width={300}
            height={300}
            className="rounded-lg mb-4"
          />
        )}
        <h2>{product.name}</h2>
      </div>
    </Link>
  );
};

const ProductsPage: React.FC = async () => {
  let products: Product[] = [];

  try {
    products = await sql`SELECT * FROM products`;
  } catch (error) {
    console.error('Error fetching products:', error);
    return (
      <div className="container mx-auto p-7 pt-0">
        <p>Error fetching products</p>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6 pt-0">
      <div className="product-list">
        {/* TEST 280624/1258 */}
        {products.map((product) => (
          <ProductLink product={product} key={product.id} />
        ))}
      </div>
    </div>
  );
};

export default ProductsPage;

----------------------------------------

// src/app/thankyou/page.tsx:

import Link from 'next/link';
import Header from '../../components/Header';
import { Metadata } from 'next';

// export const metadata: Metadata = {
//   title: 'Thank You Page',
//   description: 'Thank you page after checkout.',
// };

const ThankYouPage: React.FC = () => {
  return (
    <div>
      <div className="container mx-auto p-6 pt-0">
        <Header />
        <main className="mt-8 text-center">
          <h1 className="text-2xl font-bold mb-4">Thank you for your order</h1>
          <p className="text-lg text-gray-600 mb-6">
            Your order has been placed successfully.
          </p>
          <Link href="/">
            <span className="btn-turqoise">Continue Shopping</span>
          </Link>
        </main>
      </div>
    </div>
  );
};

export default ThankYouPage;

----------------------------------------

// package.json:

{
  "name": "nextjs-ecommerce-store",
  "version": "0.1.0",
  "private": true,
  "type": "module",
  "scripts": {
    "build": "next build",
    "dev": "next dev",
    "lint": "next lint",
    "lint:styles": "stylelint '**/*.{css,scss,less}'",
    "migrate": "ley --require tsx/cjs",
    "start": "next start",
    "test": "pnpm run test:jest && pnpm run test:playwright",
    "test:jest": "jest --config jest.config.js",
    "test:playwright": "pnpm exec playwright test"
  },
  "dependencies": {
    "@emotion/react": "^11.11.4",
    "@emotion/styled": "^11.11.5",
    "@fortawesome/fontawesome-free": "^6.5.2",
    "@fortawesome/fontawesome-svg-core": "^6.5.2",
    "@fortawesome/free-brands-svg-icons": "^6.5.2",
    "@fortawesome/free-solid-svg-icons": "^6.5.2",
    "@fortawesome/react-fontawesome": "^0.2.2",
    "@mui/material": "^5.15.20",
    "@upleveled/ley": "^0.8.6",
    "body-parser": "^1.20.2",
    "cookie-signature": "^1.2.1",
    "crypto-js": "^4.2.0",
    "dotenv": "^16.4.5",
    "dotenv-safe": "^9.1.0",
    "express": "^4.19.2",
    "js-cookie": "^3.0.5",
    "mini-css-extract-plugin": "^2.9.0",
    "mongoose": "0.0.2",
    "next": "14.2.4",
    "pg": "^8.12.0",
    "playwright": "^1.44.1",
    "postgres": "^3.4.4",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "secure-json-parse": "^2.7.0",
    "three": "^0.165.0",
    "ts-node": "^10.9.2",
    "tsx": "^4.15.7",
    "webpack": "^5.92.1"
  },
  "devDependencies": {
    "@playwright/test": "^1.44.1",
    "@testing-library/jest-dom": "^6.4.6",
    "@testing-library/react": "^16.0.0",
    "@types/babel__core": "^7.20.5",
    "@types/babel__generator": "^7.6.8",
    "@types/dotenv-safe": "^8.1.6",
    "@types/jest": "^29.5.12",
    "@types/next": "^9.0.0",
    "@types/node": "^20.14.9",
    "@types/react": "^18.3.3",
    "@types/react-dom": "^18.3.0",
    "babel-jest": "^29.7.0",
    "eslint": "^8.57.0",
    "eslint-config-next": "14.2.3",
    "eslint-config-upleveled": "^8.3.1",
    "jest": "^29.7.0",
    "jest-environment-jsdom": "^29.7.0",
    "ley": "^0.8.1",
    "postcss": "^8.4.38",
    "stylelint": "^16.6.1",
    "stylelint-config-standard": "^36.0.1",
    "tailwindcss": "^3.4.4",
    "ts-jest": "^29.1.5",
    "typescript": "^5.5.2"
  }
}

----------------------------------------

